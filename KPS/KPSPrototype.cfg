CONTRACT_TYPE
{
	sortKey = a
	name = KPSPrototype
	group = KPSConstellations

	title = Prototype navigation satellite system
	description = CommTech in partnership with several goverment agencies has approached us with a very ambitious project: a satellite system for navigation.\nThe idea is to build a constellation of radio beacons in a MKO. As positions of the beacons will be known at any given time, it should be possible to trilaterate one's location with a simple radio reciever.\nThe project is dubbed "Kerbstar Kerbal Positioning System" and due to the high number of satellites required, it will take multiple stages and contracts to complete. For now you are asked to build and launch a prototype satellite.

	synopsis = Place a prototype navigation satellite in a MKO

	maxCompletions = 1
	maxSimultaneous = 1

	completedMessage = The satellite is in position and working!

	prestige = Significant

	maxExpiry = 21

	targetBody = HomeWorld()

	notes = Required deltaV from Low @/targetBody Orbit: @/deltaV.Print() m/s \nDon't forget to leave some fuel for station-keeping!

	rewardScience = 0
	rewardReputation = @KPSConstellations:reputation
	rewardFunds = @KPSConstellations:funds
	advanceFunds = @rewardFunds / 2
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	REQUIREMENT
	{
		name = TechResearched
		type = TechResearched

		part = HighGainAntenna
	}

	REQUIREMENT
	{
		name = Rendezvous
		type = Rendezvous
	}

	DATA
	{
		type = double

		sma = @KPSConstellations:sma

		sensitivity = 2 * Pow(@/sma, 1.5) / Pow(Max(1, @/targetBody.GM()), 0.5) // rate of change of sma in relation to orbital velocity
		multiple = Pow(10, Round(Log(@sensitivity, 10) - 0.5))
		coeff = Max(Round(@sensitivity, @multiple), 1000) // sensitivity rounded to a nice round number

		distSensitivity = 18.84955592153876 * Pow(@/sma, 1.5) / Max(Pow(@/targetBody.GM(), 0.5), 1)
		distMultiple = Pow(10, Round(Log(@distSensitivity, 10) - 0.5))
		distCoeff = Round(@distSensitivity, @distMultiple)

		altThreshold1 = Round(@coeff / 2 + @multiple / 2, @multiple)
		altThreshold2 = Round(@coeff / 40 + @multiple / 20, @multiple / 10)
		altThreshold3 = Round(@coeff / 7500 + 0.5) / 2
		distThreshold1 = @distCoeff / 4

		r1 = @/targetBody.Radius() + @/targetBody.AtmosphereAltitude()
		deltaV = Pow(@/targetBody.GM() / @r1, 0.5) * (Pow(2 * @/sma / (@r1 + @/sma), 0.5) - 1) + Pow(@/targetBody.GM() / @/sma, 0.5) * (1 - Pow(2 * @/r1 / (@r1 + @/sma), 0.5))
	}

	DATA
	{
		type = long

		intAlt = @KPSConstellations:sma - HomeWorld().Radius()
		kmDistThreshold1 = Round(@/distThreshold1 / 1000)
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = KPS Marker A1
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@KPSConstellations:sma, 1.0E-11, @KPSConstellations:inc, 0, 0, 0, 1.0E-11], 1)
		}
	}

	PARAMETER
	{
		name = Satellite
		type = VesselParameterGroup

		define = KPS-Sat A1

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}

		PARAMETER
		{
			name = HasAntenna
			type = HasAntenna
			minAntennaPower = 10000000000 // 10G
			antennaType = EITHER
		}

		PARAMETER
		{
			name = Any
			type = Any
			title = Have solar panels onboard

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = true

				partModule = ModuleDeployableSolarPanel
				minCount = 1
			}
		
			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more curved solar panels
				hideChildren = true
				
				partModule = ModuleCurvedSolarPanel
				minCount = 1
			}
		
			PARAMETER:NEEDS[Kopernicus]
			{
				name = PartValidation
				type = PartValidation
				hideChildren = true
				title = 1 or more solar panels
				partModule = KopernicusSolarPanel
				minCount = 1
			}
		}

		PARAMETER
		{
			name = Orbit
			type = Orbit

			title = Circularize at @/intAlt.Print() m with less than @/altThreshold1.ToString("N0") m deviation

			minPeA = Max(0, @/intAlt - @/altThreshold1)
			maxApA = Max(0, @/intAlt + @/altThreshold1)

			minInclination = Max(0, @KPSConstellations:inc - 0.1)
			maxInclination = Min(180, @KPSConstellations:inc + 0.1)
		}

		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous

			title = Keep the satellite within @/kmDistThreshold1.Print() km of the KPS Marker A1

			disableOnStateChange = false

			vessel = KPS Marker A1
			distance = @/distThreshold1

			hideChildren = !@Constellations:DEBUG
		}

		PARAMETER
		{
			name = Precision1
			type = VesselParameterGroup

			vessel = KPS-Sat A1
			title = Circularize at @/intAlt.Print() m with less than @/altThreshold2.ToString("N0") m deviation (Optional)

			optional = True
			rewardReputation = @Constellations:precisionReputation
			rewardFunds = @Constellations:precisionFunds

			hideChildren = !@Constellations:DEBUG

			PARAMETER
			{
				name = Orbit
				type = Orbit

				minPeA = Max(0, @/intAlt - @/altThreshold2)
				maxApA = Max(0, @/intAlt + @/altThreshold2)

				minInclination = Max(0, @KPSConstellations:inc - 0.1)
				maxInclination = Min(180, @KPSConstellations:inc + 0.1)

				hideChildren = !@Constellations:DEBUG
			}
		}

		PARAMETER
		{
			name = Precision2
			type = VesselParameterGroup

			vessel = KPS-Sat A1
			title = Circularize at @/intAlt.Print() m with less than @/altThreshold3.ToString("N0") m deviation (Optional)

			optional = True
			rewardReputation = 2 * @Constellations:precisionReputation
			rewardFunds = 2 * @Constellations:precisionFunds

			hideChildren = !@Constellations:DEBUG

			PARAMETER
			{
				name = Orbit
				type = Orbit

				minPeA = Max(0, @/intAlt - @/altThreshold3)
				maxApA = Max(0, @/intAlt + @/altThreshold3)

				minInclination = Max(0, @KPSConstellations:inc - 0.1)
				maxInclination = Min(180, @KPSConstellations:inc + 0.1)

				hideChildren = !@Constellations:DEBUG
			}
		}

		duration = 1d
	}

	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = CONTRACT_COMPLETED
		vessel = KPS Marker A1
	}
}
