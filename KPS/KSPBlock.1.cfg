CONTRACT_TYPE
{
	sortKey = c

	DATA
	{
		type = int
		block = 1
	}

	name = KPSBlock.1
	group = KPSConstellations

	title = Launch KPS Block @/roman satellites
	description = We secured funds for another phase of the construction. Launch six more satellites and place them on the next orbital plane.

	synopsis = Populate another orbital plane with KPS satellites

	maxCompletions = 1
	maxSimultaneous = 1

	completedMessage = Block @/roman is complete!

	prestige = Exceptional

	maxExpiry = 21

	targetBody = HomeWorld()

	rewardScience = 0
	rewardReputation = 4 * @KPSConstellations:reputation
	rewardFunds = 4 * @KPSConstellations:funds
	advanceFunds = @rewardFunds / 2
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract

		contractType = "KPSBlock."+@/prev
		cooldownDuration = @Constellations:constellationCD2
	}

	DATA
	{
		type = double

		sma = @KPSConstellations:sma

		sensitivity = 2 * Pow(@/sma, 1.5) / Pow(Max(1, @/targetBody.GM()), 0.5) // rate of change of sma in relation to orbital velocity
		multiple = Pow(10, Round(Log(@sensitivity, 10) - 0.5))
		coeff = Max(Round(@sensitivity, @multiple), 1000) // sensitivity rounded to a nice round number

		distSensitivity = 18.84955592153876 * Pow(@/sma, 1.5) / Max(Pow(@/targetBody.GM(), 0.5), 1)
		distMultiple = Pow(10, Round(Log(@distSensitivity, 10) - 0.5))
		distCoeff = Round(@distSensitivity, @distMultiple)

		altThreshold1 = Round(@coeff / 2 + @multiple / 2, @multiple)
		altThreshold2 = Round(@coeff / 40 + @multiple / 20, @multiple / 10)
		altThreshold3 = Round(@coeff / 7500 + 0.5) / 2
		distThreshold1 = @distCoeff / 4
	}

	DATA
	{
		type = long

		prev = @/block - 1
		intAlt = @KPSConstellations:sma - HomeWorld().Radius()
		kmDistThreshold1 = Round(@/distThreshold1 / 1000)
	}

	DATA
	{
		type = List<double>
		offsets = [0, 1.0471975512, 2.0943951024, 3.1415926536, 4.1887902048, 5.235987756]
		lans = [0, 120, 240]
	}

	DATA
	{
		type = List<string>
		planes = ["A", "B", "C"]
		romans = ["I", "II", "III"]
	}

	DATA
	{
		type = string
		plane = @/planes.ElementAt(@/block)
		roman = @/romans.ElementAt(@/block)
		vessel1 = "KPS-Sat "+@/plane+"1"
		vessel2 = "KPS-Sat "+@/plane+"2"
		vessel3 = "KPS-Sat "+@/plane+"3"
		vessel4 = "KPS-Sat "+@/plane+"4"
		vessel5 = "KPS-Sat "+@/plane+"5"
		vessel6 = "KPS-Sat "+@/plane+"6"
		marker1 = "KPS Marker "+@/plane+"1"
		marker2 = "KPS Marker "+@/plane+"2"
		marker3 = "KPS Marker "+@/plane+"3"
		marker4 = "KPS Marker "+@/plane+"4"
		marker5 = "KPS Marker "+@/plane+"5"
		marker6 = "KPS Marker "+@/plane+"6"
	}

	DATA
	{
		type = List<string>
		names = ["SAT 1", "SAT 2", "SAT 3", "SAT 4", "SAT 5", "SAT 6"]
		vessels = [ @/vessel1, @/vessel2, @/vessel3, @/vessel4, @/vessel5, @/vessel6 ]
		markers = [ @/marker1, @/marker2, @/marker3, @/marker4, @/marker5, @/marker6 ]
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(0)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@KPSConstellations:sma, 1.0E-11, @KPSConstellations:inc, 0, @/lans.ElementAt(@/block), @/offsets.ElementAt(0) + @/block * @KPSConstellations:blockPhaseOffset, 1.0E-11], 1)
		}
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(1)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@KPSConstellations:sma, 1.0E-11, @KPSConstellations:inc, 0, @/lans.ElementAt(@/block), @/offsets.ElementAt(1) + @/block * @KPSConstellations:blockPhaseOffset, 1.0E-11], 1)
		}
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(2)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@KPSConstellations:sma, 1.0E-11, @KPSConstellations:inc, 0, @/lans.ElementAt(@/block), @/offsets.ElementAt(2) + @/block * @KPSConstellations:blockPhaseOffset, 1.0E-11], 1)
		}
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(3)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@KPSConstellations:sma, 1.0E-11, @KPSConstellations:inc, 0, @/lans.ElementAt(@/block), @/offsets.ElementAt(3) + @/block * @KPSConstellations:blockPhaseOffset, 1.0E-11], 1)
		}
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(4)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@KPSConstellations:sma, 1.0E-11, @KPSConstellations:inc, 0, @/lans.ElementAt(@/block), @/offsets.ElementAt(4) + @/block * @KPSConstellations:blockPhaseOffset, 1.0E-11], 1)
		}
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(5)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@KPSConstellations:sma, 1.0E-11, @KPSConstellations:inc, 0, @/lans.ElementAt(@/block), @/offsets.ElementAt(5) + @/block * @KPSConstellations:blockPhaseOffset, 1.0E-11], 1)
		}
	}

	PARAMETER
	{
		ITERATOR
		{
			type = int
			idx = [0, 1, 2, 3, 4, 5]
		}
		name = "Sat"+@idx
		type = VesselParameterGroup
		title = @/names.ElementAt(@idx)

		define = @/vessels.ElementAt(@idx)
		rewardFunds = @KPSConstellations:perSatFunds

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}

		PARAMETER
		{
			name = HasAntenna
			type = HasAntenna
			minAntennaPower = 10000000000 // 10G
			antennaType = EITHER
		}

		PARAMETER
		{
			name = Any
			type = Any
			title = Have solar panels onboard

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = true

				partModule = ModuleDeployableSolarPanel
				minCount = 1
			}
		
			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more curved solar panels
				hideChildren = true
				
				partModule = ModuleCurvedSolarPanel
				minCount = 1
			}
		
			PARAMETER:NEEDS[Kopernicus]
			{
				name = PartValidation
				type = PartValidation
				hideChildren = true
				title = 1 or more solar panels
				partModule = KopernicusSolarPanel
				minCount = 1
			}
		}

		PARAMETER
		{
			name = Orbit
			type = Orbit

			title = Circularize at @/intAlt.Print() m with less than @/altThreshold1.ToString("N0") m deviation

			minPeA = Max(0, @/intAlt - @/altThreshold1)
			maxApA = Max(0, @/intAlt + @/altThreshold1)

			minInclination = Max(0, @KPSConstellations:inc - 0.1)
			maxInclination = Min(180, @KPSConstellations:inc + 0.1)
		}

		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous

			title = Keep the satellite within @/kmDistThreshold1.Print() km of the @/markers.ElementAt(@../idx)

			disableOnStateChange = false

			vessel = @/markers.ElementAt(@../idx)
			distance = @/distThreshold1

			hideChildren = !@Constellations:DEBUG
		}

		PARAMETER
		{
			name = Precision1
			type = VesselParameterGroup

			vessel = @/vessels.ElementAt(@../idx)
			title = Circularize at @/intAlt.Print() m with less than @/altThreshold2.ToString("N0") m deviation (Optional)

			optional = True
			rewardReputation = @Constellations:precisionReputation
			rewardFunds = @Constellations:precisionFunds

			hideChildren = !@Constellations:DEBUG

			PARAMETER
			{
				name = Orbit
				type = Orbit

				minPeA = Max(0, @/intAlt - @/altThreshold2)
				maxApA = Max(0, @/intAlt + @/altThreshold2)

				minInclination = Max(0, @KPSConstellations:inc - 0.1)
				maxInclination = Min(180, @KPSConstellations:inc + 0.1)

				hideChildren = !@Constellations:DEBUG
			}
		}

		PARAMETER
		{
			name = Precision2
			type = VesselParameterGroup

			vessel = @/vessels.ElementAt(@../idx)
			title = Circularize at @/intAlt.Print() m with less than @/altThreshold3.ToString("N0") m deviation (Optional)

			optional = True
			rewardReputation = 2 * @Constellations:precisionReputation
			rewardFunds = 2 * @Constellations:precisionFunds

			hideChildren = !@Constellations:DEBUG

			PARAMETER
			{
				name = Orbit
				type = Orbit

				minPeA = Max(0, @/intAlt - @/altThreshold3)
				maxApA = Max(0, @/intAlt + @/altThreshold3)

				minInclination = Max(0, @KPSConstellations:inc - 0.1)
				maxInclination = Min(180, @KPSConstellations:inc + 0.1)

				hideChildren = !@Constellations:DEBUG
			}
		}

		duration = 1d
	}

	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = Sat0
		vessel = @/markers.ElementAt(0)
	}

	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = Sat1
		vessel = @/markers.ElementAt(1)
	}

	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = Sat2
		vessel = @/markers.ElementAt(2)
	}

	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = Sat3
		vessel = @/markers.ElementAt(3)
	}

	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = Sat4
		vessel = @/markers.ElementAt(4)
	}

	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = Sat5
		vessel = @/markers.ElementAt(5)
	}
}
