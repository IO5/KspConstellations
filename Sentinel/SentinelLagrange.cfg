CONTRACT_TYPE
{
	sortKey = a

	name = SentinelLagrange
	group = SentinelConstellations

	genericTitle = Place SENTINEL Infrared Telescope at planets's Lagrange point
	title = Place SENTINEL Infrared Telescope at @/targetBody's @/point Lagrange point
	description = "As pretty as impact craters are, we think that "+HomeWorld()+" has more than enough of large ones. It would be nice to have an early warning if an asteroid was on a collision course with our planet. We secured funding and we want you to put an infrared telescope in the @/point point of @/targetBody, as it should help us cover our blind spots."

	synopsis = Place a vessel with a SENTINEL telescope at a @/point point of @/targetBody
	genericDescription = Place a vessel with a SENTINEL telescopee at planets Lagrange point

	completedMessage = SENTINEL is in position and working!

	prestige = Significant

	maxExpiry = 90

	targetBody = @/planet

	rewardScience = 0
	rewardReputation = @SentinelConstellations:baseReputation
	rewardFunds = @SentinelConstellations:baseFunds
	advanceFunds = @rewardFunds / 3
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	REQUIREMENT
	{
		type = Orbit
		name = Orbit

		targetBody = Sun
	}

	DATA
	{
		type = CelestialBody
		planet = ReachedBodies().Where(b => (b.IsPlanet() && b.Orbit().Eccentricity() < 0.4)).SelectUnique()
		uniquenessCheck = CONTRACT_ACTIVE

		title = "Target body must be a planet, with an orbit with an eccentricity less than 0.4, and must be reached by the player"
	}

	DATA
	{
		type = List<string>
		points = ["L3", "L4", "L5"]
	}

	DATA
	{
		type = string
		point = @/points.SelectUnique()
		uniquenessCheck = CONTRACT_ACTIVE
		hidden = true
	}

	DATA
	{
		type = double
		rng = Random()
	}

	REQUIREMENT
	{
		name = Rng
		type = Expression
		expression = @/rng > 0.9
		checkOnActiveContract = false
		title = Random chance
	}

	DATA
	{
		type = string
		marker = @/targetBody+" "+@/point+" Marker"
		sentinel = @/targetBody+" "+@/point+" SENTINEL"
		hidden = true
	}

	REQUIREMENT
	{
		name = NotEstablished
		type = ValidVessel

		vessel = @/sentinel
		invertRequirement = true
	}

	REQUIREMENT
	{
		name = TechResearched
		type = TechResearched

		part = InfraredTelescope
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/marker
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody.Parent()
			vesselType = DroppedPart

			ORBIT
			{
				SMA = @/targetBody.Orbit().SemiMajorAxis()
				ECC = @/targetBody.Orbit().Eccentricity() + 1.0E-12
				INC = @/targetBody.Orbit().Inclination() + 1.0E-12
				LPE = @/targetBody.Orbit().ArgumentOfPeriapsis()
				LAN = @/targetBody.Orbit().LAN() + 1.0E-12
				MNA = @/targetBody.Orbit().MeanAnomalyAtEpoch() + (@/point != "L3" ? (@/point != "L4" ? 5.23598775598 : -5.23598775598) : 3.14159265359)
				EPH = @/targetBody.Orbit().Epoch() + 1.0E-12
				REF = 0 // ignored
			}
		}
	}

	DATA
	{
		type = long
	}

	DATA
	{
		type = double
		sma = Max(@/targetBody.Orbit().SemiMajorAxis(), 1)

		sensitivity = 2 * Pow(@/sma, 1.5) / Pow(Max(1, @/targetBody.Parent().GM()), 0.5) // rate of change of sma in relation to orbital velocity
		multiple = Pow(10, Round(Log(@sensitivity, 10) - 0.5))
		coeff = Max(Round(@sensitivity, @multiple), 1000) // sensitivity rounded to a nice round number

		distSensitivity = 18.84955592153876 * Pow(@/sma, 1.5) / Max(Pow(@/targetBody.Parent().GM(), 0.5), 1)
		distMultiple = Pow(10, Round(Log(@distSensitivity, 10) - 0.5))
		distCoeff = Round(@distSensitivity, @distMultiple)

		altThreshold1 = Round(@coeff / 2 + @multiple / 2, @multiple)
		altThreshold2 = Round(@coeff / 40 + @multiple / 20, @multiple / 10)
		altThreshold3 = Round(@coeff / 7500 + 0.5) / 2
		distThreshold1 = @distCoeff / 4
	}

	DATA
	{
		type = long

		intAp = @/targetBody.Orbit().Apoapsis()
		intPe = @/targetBody.Orbit().Periapsis()
		kmDistThreshold1 = Round(@/distThreshold1 / 1000)
	}

	PARAMETER
	{
		name = Vessel
		type = VesselParameterGroup

		define = @/sentinel

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}

		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Probe
		}

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}

		PARAMETER
		{
			name = PartValidation
			type = PartValidation

			part = InfraredTelescope
		}

		PARAMETER
		{
			name = Any
			type = Any
			title = Have a power generator onboard

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = !@SentinelConstellations:DEBUG
				partModule = ModuleDeployableSolarPanel
				minCount = 1
			}

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more generators
				hideChildren = !@SentinelConstellations:DEBUG
				partModule = ModuleGenerator
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more curved solar panels
				hideChildren = !@SentinelConstellations:DEBUG
				partModule = ModuleCurvedSolarPanel
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more fission reactors
				hideChildren = !@SentinelConstellations:DEBUG
				partModule = FissionReactor
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more radioisotope generators
				hideChildren = !@SentinelConstellations:DEBUG
				partModule = ModuleRadioisotopeGenerator
				minCount = 1
			}

			PARAMETER:NEEDS[Kopernicus]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = !@SentinelConstellations:DEBUG
				partModule = KopernicusSolarPanel
				minCount = 1
			}
		}

		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Probe
			disableOnStateChange = false
		}

		PARAMETER
		{
			name = Orbita
			type = Orbit

			REQUIREMENT
			{
				name = CircularOrbit
				type = Expression

				expression = @/targetBody.Orbit().Eccentricity() == 0
			}

			title = Match the orbit with less than @/altThreshold1.ToString("N0") m deviation

			targetBody = @/targetBody.Parent()

			minPeA = Max(0, @/intPe - @/altThreshold1)
			maxPeA = @/intPe + @/altThreshold1
			minApA = Max(0, @/intAp - @/altThreshold1)
			maxApA = @/intAp + @/altThreshold1

			minInclination = Max(0, Round(@/targetBody.Orbit().Inclination(), 0.1) - 0.05)
			maxInclination = Min(180, Round(@/targetBody.Orbit().Inclination(), 0.1) + 0.049)
		}

		PARAMETER
		{
			name = Orbitb
			type = Orbit

			REQUIREMENT
			{
				name = ElipticalOrbit
				type = Expression

				expression = @/targetBody.Orbit().Eccentricity() == 0
				invertRequirement = true
			}

			title = Circularize at @/intPe.Print() with less than @/altThreshold1.ToString("N0") m deviation

			targetBody = @/targetBody.Parent()

			minPeA = Max(0, @/intPe - @/altThreshold1)
			maxApA = @/intAp + @/altThreshold1

			minInclination = Max(0, Round(@/targetBody.Orbit().Inclination(), 0.1) - 0.05)
			maxInclination = Min(180, Round(@/targetBody.Orbit().Inclination(), 0.1) + 0.049)
		}

		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous

			title = Keep the vessel within @/kmDistThreshold1.Print() km of the @/marker

			disableOnStateChange = false

			vessel = @/marker
			distance = @/distThreshold1

			hideChildren = !@SentinelConstellations:DEBUG
		}

		PARAMETER
		{
			name = Precision1a
			type = VesselParameterGroup

			REQUIREMENT
			{
				name = CircularOrbit
				type = Expression

				expression = @/targetBody.Orbit().Eccentricity() == 0
			}

			vessel = @/sentinel
			title = Circularize at @/intPe.Print() m with less than @/altThreshold2.ToString("N0") m deviation (Optional)

			optional = True
			rewardReputation = @SentinelConstellations:precisionReputation
			rewardFunds = @SentinelConstellations:precisionFunds

			hideChildren = !@SentinelConstellations:DEBUG

			PARAMETER
			{
				name = Orbit
				type = Orbit

				targetBody = @/targetBody.Parent()

				minPeA = Max(0, @/intPe - @/altThreshold2)
				maxApA = @/intPe + @/altThreshold2

				minInclination = Max(0, Round(@/targetBody.Orbit().Inclination(), 0.1) - 0.05)
				maxInclination = Min(180, Round(@/targetBody.Orbit().Inclination(), 0.1) + 0.049)

				hideChildren = !@SentinelConstellations:DEBUG
			}
		}

		PARAMETER
		{
			name = Precision1b
			type = VesselParameterGroup

			REQUIREMENT
			{
				name = ElipticalOrbit
				type = Expression

				expression = @/targetBody.Orbit().Eccentricity() == 0
				invertRequirement = true
			}

			vessel = @/sentinel
			title = Match the orbit with less than @/altThreshold2.ToString("N0") m deviation (Optional)
			notes = Target periapsis: @/intPe.Print() m\nTarget apoapsis: @/intAp.Print() m

			optional = True
			rewardReputation = @SentinelConstellations:precisionReputation
			rewardFunds = @SentinelConstellations:precisionFunds

			hideChildren = !@SentinelConstellations:DEBUG

			PARAMETER
			{
				name = Orbit
				type = Orbit

				targetBody = @/targetBody.Parent()

				minPeA = Max(0, @/intPe - @/altThreshold2)
				maxApA = @/intPe + @/altThreshold2

				minInclination = Max(0, Round(@/targetBody.Orbit().Inclination(), 0.1) - 0.05)
				maxInclination = Min(180, Round(@/targetBody.Orbit().Inclination(), 0.1) + 0.049)

				hideChildren = !@SentinelConstellations:DEBUG
			}
		}

		PARAMETER
		{
			name = Precision2a
			type = VesselParameterGroup

			REQUIREMENT
			{
				name = CircularOrbit
				type = Expression

				expression = @/targetBody.Orbit().Eccentricity() == 0
			}

			vessel = @/sentinel
			title = Circularize at @/intPe.Print() m with less than @/altThreshold3.ToString("N0") m deviation (Optional)

			optional = True
			rewardReputation = 2 * @SentinelConstellations:precisionReputation
			rewardFunds = 2 * @SentinelConstellations:precisionFunds

			hideChildren = !@SentinelConstellations:DEBUG

			PARAMETER
			{
				name = Orbit
				type = Orbit

				targetBody = @/targetBody.Parent()

				minPeA = Max(0, @/intPe - @/altThreshold3)
				maxApA = @/intPe + @/altThreshold3

				minInclination = Max(0, Round(@/targetBody.Orbit().Inclination(), 0.1) - 0.05)
				maxInclination = Min(180, Round(@/targetBody.Orbit().Inclination(), 0.1) + 0.049)

				hideChildren = !@SentinelConstellations:DEBUG
			}
		}

		PARAMETER
		{
			name = Precision2b
			type = VesselParameterGroup

			REQUIREMENT
			{
				name = ElipticalOrbit
				type = Expression

				expression = @/targetBody.Orbit().Eccentricity() == 0
				invertRequirement = true
			}

			vessel = @/sentinel
			title = Match the orbit with less than @/altThreshold3.ToString("N0") m deviation (Optional)
			notes = Target periapsis: @/intPe.Print() m\nTarget apoapsis: @/intAp.Print() m

			optional = True
			rewardReputation = 2 * @SentinelConstellations:precisionReputation
			rewardFunds = 2 * @SentinelConstellations:precisionFunds

			hideChildren = !@SentinelConstellations:DEBUG

			PARAMETER
			{
				name = Orbit
				type = Orbit

				targetBody = @/targetBody.Parent()

				minPeA = Max(0, @/intPe - @/altThreshold3)
				maxApA = @/intPe + @/altThreshold3

				minInclination = Max(0, Round(@/targetBody.Orbit().Inclination(), 0.1) - 0.05)
				maxInclination = Min(180, Round(@/targetBody.Orbit().Inclination(), 0.1) + 0.049)

				hideChildren = !@SentinelConstellations:DEBUG
			}
		}

		duration = 1d
	}

	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = CONTRACT_COMPLETED
		vessel = @/marker
	}
}
