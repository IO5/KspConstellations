CONTRACT_TYPE
{
	sortKey = e

	name = KsoRelayStationKeep
	group = StationKeepConstellations
	agent = Frontier Link

	title = Kerbostationary relays station-keeping
	description = It's been more than a year since we last verified position of the KSO relays. It is normal for a satellite to drift from its target position over time, we ask you to bring the relays back within margins. If a vessel is already in a correct position, you don't have to do anything other that focusing it.

	maxSimultaneous = 1

	synopsis = Fix KSO relays orbits if necessary

	completedMessage = The relays are in position and working!

	prestige = Trivial

	maxExpiry = 21

	targetBody = HomeWorld()

	rewardScience = 0
	rewardReputation = @StationKeepConstellations:stationKeepReputation
	rewardFunds = 3 * @StationKeepConstellations:stationKeepFunds
	advanceFunds = 0
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract

		title = Must have established KSO relays through contract, but no earlier than @StationKeepConstellations:stationKeepCD ago.

		contractType = KsoRelayFollowUp
		cooldownDuration = @StationKeepConstellations:stationKeepCD
	}

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract

		title = At least @StationKeepConstellations:stationKeepCD has passed since the last time the contract was completed.

		contractType = KsoRelayStationKeep
		cooldownDuration = @StationKeepConstellations:stationKeepCD
		minCount = 0
	}

	DATA
	{
		type = List<string>
		vessels = ["KSO Relay A", "KSO Relay B", "KSO Relay C"]
		markers = ["KSO Relay Marker A", "KSO Relay Marker B", "KSO Relay Marker C"]
	}

	REQUIREMENT
	{
		name = ValidVessel
		type = ValidVessel

		vessel = @/vessels.ElementAt(0)
	}

	REQUIREMENT
	{
		name = ValidVessel
		type = ValidVessel

		vessel = @/vessels.ElementAt(1)
	}

	REQUIREMENT
	{
		name = ValidVessel
		type = ValidVessel

		vessel = @/vessels.ElementAt(2)
	}

	DATA
	{
		type = VesselIdentifier
		relayA = VesselIdentifier("KSO Relay A")
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(0)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@/sma, 1.0E-11, 0, Vessel(@/relayA).Orbit().ArgumentOfPeriapsis(), Vessel(@/relayA).Orbit().LAN(), Vessel(@/relayA).Orbit().MeanAnomalyAtEpoch(), Vessel(@/relayA).Orbit().Epoch()], 1)
		}

		VESSEL
		{
			name = @/markers.ElementAt(1)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@/sma, 1.0E-11, 0, Vessel(@/relayA).Orbit().ArgumentOfPeriapsis(), Vessel(@/relayA).Orbit().LAN(), Vessel(@/relayA).Orbit().MeanAnomalyAtEpoch() + 2.0943951023931953, Vessel(@/relayA).Orbit().Epoch()], 1)
		}

		VESSEL
		{
			name = @/markers.ElementAt(2)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@/sma, 1.0E-11, 0, Vessel(@/relayA).Orbit().ArgumentOfPeriapsis(), Vessel(@/relayA).Orbit().LAN(), Vessel(@/relayA).Orbit().MeanAnomalyAtEpoch() - 2.0943951023931953, Vessel(@/relayA).Orbit().Epoch()], 1)
		}
	}

	DATA
	{
		type = double
		sma = Pow((@/targetBody.GM() * Pow(@/targetBody.RotationalPeriod(), 2)) / 39.478417604357432, 0.3333333333333333)

		sensitivity = 2 * Pow(@/sma, 1.5) / Pow(Max(1, @/targetBody.GM()), 0.5) // rate of change of sma in relation to orbital velocity
		multiple = Pow(10, Round(Log(@sensitivity, 10) - 0.5))
		coeff = Max(Round(@sensitivity, @multiple), 1000) // sensitivity rounded to a nice round number

		distSensitivity = 18.84955592153876 * Pow(@/sma, 1.5) / Max(Pow(@/targetBody.GM(), 0.5), 1)
		distMultiple = Pow(10, Round(Log(@distSensitivity, 10) - 0.5))
		distCoeff = Round(@distSensitivity, @distMultiple)

		altThreshold1 = Round(@coeff / 2 + @multiple / 2, @multiple)
		distThreshold3 = @distCoeff
	}

	DATA
	{
		type = long

		intAlt = Round(@/sma - @/targetBody.Radius())
		kmDistThreshold3 = Round(@/distThreshold3 / 1000)
	}

	PARAMETER
	{
		ITERATOR
		{
			type = int
			idx = [0, 1, 2]
		}
		name = "Relay"+@idx
		type = VesselParameterGroup

		vessel = @/vessels.ElementAt(@idx)

		completedMessage = Position of @/vessels.ElementAt(@idx) verified successfully
		rewardFunds = @StationKeepConstellations:stationKeepFunds

		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Relay
		}

		PARAMETER
		{
			name = Orbit
			type = Orbit

			minPeA = Max(0, @/intAlt - @/altThreshold1)
			maxApA = Max(0, @/intAlt + @/altThreshold1)

			maxInclination = 0.049
		}

		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous
			hideChildren = !@StationKeepConstellations:DEBUG

			title = "The relay should be within "+@/kmDistThreshold3.Print()+" km of the "+@/markers.ElementAt(@../idx)

			vessel = @/markers.ElementAt(@../idx)
			distance = @/distThreshold3

			disableOnStateChange = false
		}

		duration = 2s
	}

	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = CONTRACT_COMPLETED
		vessel = @/markers.ElementAt(0)
		vessel = @/markers.ElementAt(1)
		vessel = @/markers.ElementAt(2)
	}
}
