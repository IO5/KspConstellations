CONTRACT_TYPE
{
	sortKey = b

	name = ConstellationsMoonRelayLagrangeStationKeep
	group = StationKeepConstellations
	agent = Frontier Link

	genericTitle = Moon's Lagrange point relays station-keeping
	title = "@/targetBody"+"'s Lagrange point relays station-keeping"
	description = It's been some time since we last verified position of the @targetBody Lagrange relays. It is normal for a satellite to drift from its target position over time, we ask you to bring the relays back within margins. If a vessel is already in a correct position, you don't have to do anything other that focusing it.

	maxSimultaneous = 1

	synopsis = Fix @targetBody's Lagrange relays orbits if necessary
	genericDescription = Fix bodys Lagrange relays orbits if necessary

	completedMessage = The relays are in position and working!

	prestige = Trivial

	maxExpiry = 21

	targetBody = @/tidalMoon

	rewardScience = 0
	rewardReputation = @StationKeepConstellations:stationKeepReputation
	rewardFunds = 2 * @StationKeepConstellations:stationKeepFunds / @targetBody.Multiplier()
	advanceFunds = 0
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	DATA
	{
		type = Boolean
		coMoon = HomeWorld().Parent().IsPlanet()
		hidden = true
	}

	DATA
	{
		type = CelestialBody
		tidalMoon = (@/coMoon ? HomeWorld().Parent().Children() : HomeWorld().Children()).Where(b => (b.Orbit().Period() == b.RotationalPeriod())).SelectUnique()
		uniquenessCheck = CONTRACT_ACTIVE

		title = "Target body must be "+HomeWorld()+"'s tidally locked moon or co-moon"
	}

	DATA
	{
		type = List<double>
		lastStationKeep = $lastStationKeep
		requiredValue = false
	}

	DATA
	{
		type = string
		hidden = true
		l4Marker = @/targetBody+" L4 Relay Marker"
		l5Marker = @/targetBody+" L5 Relay Marker"
		l4Relay = @/targetBody+" L4 Relay"
		l5Relay = @/targetBody+" L5 Relay"
	}

	DATA
	{
		type = List<string>
		points = ["L4", "L5"]
		markers = [ @/l4Marker, @/l5Marker ]
	}

	DATA
	{
		type = List<VesselIdentifier>
		relays = [ @/l4Relay, @/l5Relay ]
	}

	REQUIREMENT
	{
		name = Established
		type = ValidVessel

		vessel = @/relays.ElementAt(0)
	}

	REQUIREMENT
	{
		name = Established
		type = ValidVessel

		vessel = @/relays.ElementAt(1)
	}

	DATA
	{
		type = double
		met = Max(Vessel(@/relays.ElementAt(0)).MET(), Vessel(@/relays.ElementAt(1)).MET())
		cd = @StationKeepConstellations:stationKeepCD
	}

	REQUIREMENT
	{
		name = OldRelays
		type = Expression

		expression = @/met > @/cd
		title = At least @StationKeepConstellations:stationKeepCD has passed since the relays have been established
	}

	REQUIREMENT
	{
		name = CoolDown
		type = Expression

		// using parent since it since it should be a free index for stock system, for non stock... if there's a collision it just makes the contract less frequent
		expression = ( UniversalTime() - @/lastStationKeep.ElementAt(AllBodies().IndexOf(@/targetBody.Parent())) ) > @/cd
		title = At least @StationKeepConstellations:stationKeepCD has passed since the last station-keeping of the relays
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(0)
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody.Parent()
			vesselType = DroppedPart

			ORBIT
			{
				SMA = @/targetBody.Orbit().SemiMajorAxis()
				ECC = @/targetBody.Orbit().Eccentricity() + 1.0E-11
				INC = @/targetBody.Orbit().Inclination() + 1.0E-11
				LPE = @/targetBody.Orbit().ArgumentOfPeriapsis()
				LAN = @/targetBody.Orbit().LAN() + 1.0E-11
				MNA = @/targetBody.Orbit().MeanAnomalyAtEpoch() + 1.0471975512
				EPH = @/targetBody.Orbit().Epoch() + 1.0E-11
				REF = 0 // ignored
			}
		}

		VESSEL
		{
			name = @/markers.ElementAt(1)
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody.Parent()
			vesselType = DroppedPart

			ORBIT
			{
				SMA = @/targetBody.Orbit().SemiMajorAxis()
				ECC = @/targetBody.Orbit().Eccentricity() + 1.0E-11
				INC = @/targetBody.Orbit().Inclination() + 1.0E-11
				LPE = @/targetBody.Orbit().ArgumentOfPeriapsis()
				LAN = @/targetBody.Orbit().LAN() + 1.0E-11
				MNA = @/targetBody.Orbit().MeanAnomalyAtEpoch() - 1.0471975512
				EPH = @/targetBody.Orbit().Epoch() + 1.0E-11
				REF = 0 // ignored
			}
		}
	}

	DATA
	{
		type = double
		sma = Max(@/targetBody.Orbit().SemiMajorAxis(), 1)

		sensitivity = 2 * Pow(@/sma, 1.5) / Pow(Max(1, @/targetBody.Parent().GM()), 0.5) // rate of change of sma in relation to orbital velocity
		multiple = Pow(10, Round(Log(@sensitivity, 10) - 0.5))
		coeff = Max(Round(@sensitivity, @multiple), 1000) // sensitivity rounded to a nice round number

		distSensitivity = 18.84955592153876 * Pow(@/sma, 1.5) / Max(Pow(@/targetBody.Parent().GM(), 0.5), 1)
		distMultiple = Pow(10, Round(Log(@distSensitivity, 10) - 0.5))
		distCoeff = Round(@distSensitivity, @distMultiple)

		altThreshold1 = Round(@coeff / 2 + @multiple / 2, @multiple)
		distThreshold3 = @distCoeff
	}

	DATA
	{
		type = long

		intAlt = @/targetBody.Orbit().SemiMajorAxis() - @/targetBody.Parent().Radius()
		kmDistThreshold3 = Round(@/distThreshold3 / 1000)
	}

	PARAMETER
	{
		ITERATOR
		{
			type = int
			idx = [0, 1]
		}
		name = "Relay"+@idx
		type = VesselParameterGroup

		vessel = @/relays.ElementAt(@idx)

		completedMessage = Position of the @/relays.ElementAt(@idx) verified successfully
		rewardFunds = @StationKeepConstellations:stationKeepFunds / @targetBody.Multiplier()

		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Relay
		}

		PARAMETER
		{
			name = Orbit
			type = Orbit

			targetBody = @/targetBody.Parent()

			minPeA = Max(0, @/targetBody.Orbit().Periapsis() - @/altThreshold1)
			maxApA = @/targetBody.Orbit().Apoapsis() + @/altThreshold1

			minInclination = Max(0, Round(@/targetBody.Orbit().Inclination(), 0.1) - 0.05)
			maxInclination = Min(180, Round(@/targetBody.Orbit().Inclination(), 0.1) + 0.049)
		}

		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous

			title = "The relay should be within "+@/kmDistThreshold3.Print()+" km of the marker"
			hideChildren = !@StationKeepConstellations:DEBUG

			disableOnStateChange = false

			vessel = @/markers.ElementAt(@../idx)
			distance = @/distThreshold3
		}

		duration = 2s
	}

	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = CONTRACT_COMPLETED
		vessel = @/markers.ElementAt(0)
		vessel = @/markers.ElementAt(1)
	}

	BEHAVIOUR
	{
		name = Expression
		type = Expression
		CONTRACT_COMPLETED_SUCCESS
		{
			type = List<double>
			lastStationKeep = @/lastStationKeep.ReplaceElementAt(AllBodies().IndexOf(@/targetBody.Parent()), UniversalTime())
		}
	}
}
