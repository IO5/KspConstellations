CONTRACT_TYPE
{
	DATA
	{
		type = double

		period = HomeWorld().RotationalPeriod() / 2
		sma = Pow((HomeWorld().GM() * Pow(@period, 2)) / 39.478417604357432, 0.33333333333333331)
		inc = 55
		blockPhaseOffset = 0.3490658504

		reputation = 10
		funds = 30 * HomeWorld().Radius() / 600
		perSatFunds = 10000
	}

	sortKey = f

	DATA_EXPAND
	{
		type = int
		block = [0, 1, 2]
	}

	name = KSPStationKeep
	group = StationKeepConstellations
	agent = KPS

	title = KPS Block @/roman station-keeping
	description = It's been more than a year since we last verified the positions of the Block @/roman satellites and the system depends on them being exactly where they are supposed to be. It is normal for a satellite to drift from its target position over time, we ask you to bring the vessels back within margins. If a vessel is already in a correct position, you don't have to do anything other that focusing it.

	synopsis = Fix KPS Block @/roman satellites orbits if necessary

	maxSimultaneous = 1

	completedMessage = Positions verified successfully

	prestige = Trivial

	maxExpiry = 21

	targetBody = HomeWorld()

	rewardScience = 0
	rewardReputation = @StationKeepConstellations:stationKeepReputation
	rewardFunds = 6 * @StationKeepConstellations:stationKeepFunds / @targetBody.Multiplier()
	advanceFunds = 0
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract

		contractType = "KPSBlock."+@/block
		cooldownDuration = @StationKeepConstellations:stationKeepCD
	}

	REQUIREMENT
	{
		name = CoolDown
		type = CompleteContract

		title = At least @StationKeepConstellations:stationKeepCD has passed since the last time the contract was completed.

		contractType = "KSPStationKeep."+@/block
		cooldownDuration = @StationKeepConstellations:stationKeepCD
		minCount = 0
	}

	DATA
	{
		type = double

		sensitivity = 2 * Pow(@/sma, 1.5) / Pow(Max(1, @/targetBody.GM()), 0.5) // rate of change of sma in relation to orbital velocity
		multiple = Pow(10, Round(Log(@sensitivity, 10) - 0.5))
		coeff = Max(Round(@sensitivity, @multiple), 1000) // sensitivity rounded to a nice round number

		distSensitivity = 18.84955592153876 * Pow(@/sma, 1.5) / Max(Pow(@/targetBody.GM(), 0.5), 1)
		distMultiple = Pow(10, Round(Log(@distSensitivity, 10) - 0.5))
		distCoeff = Round(@distSensitivity, @distMultiple)

		altThreshold1 = Round(@coeff / 2 + @multiple / 2, @multiple)
		distThreshold3 = @distCoeff
	}

	DATA
	{
		type = long

		prev = @/block - 1
		intAlt = @/sma - HomeWorld().Radius()
		kmDistThreshold3 = Round(@/distThreshold3 / 1000)
	}

	DATA
	{
		type = List<double>
		offsets = [0, 1.0471975512, 2.0943951024, 3.1415926536, 4.1887902048, 5.235987756]
		lans = [0, 120, 240]
	}

	DATA
	{
		type = List<string>
		planes = ["A", "B", "C"]
		romans = ["I", "II", "III"]
	}

	DATA
	{
		type = string
		plane = @/planes.ElementAt(@/block)
		roman = @/romans.ElementAt(@/block)
		vessel1 = "KPS-Sat "+@/plane+"1"
		vessel2 = "KPS-Sat "+@/plane+"2"
		vessel3 = "KPS-Sat "+@/plane+"3"
		vessel4 = "KPS-Sat "+@/plane+"4"
		vessel5 = "KPS-Sat "+@/plane+"5"
		vessel6 = "KPS-Sat "+@/plane+"6"
		marker1 = "KPS Marker "+@/plane+"1"
		marker2 = "KPS Marker "+@/plane+"2"
		marker3 = "KPS Marker "+@/plane+"3"
		marker4 = "KPS Marker "+@/plane+"4"
		marker5 = "KPS Marker "+@/plane+"5"
		marker6 = "KPS Marker "+@/plane+"6"
	}

	DATA
	{
		type = List<string>
		vessels = [ @/vessel1, @/vessel2, @/vessel3, @/vessel4, @/vessel5, @/vessel6 ]
		markers = [ @/marker1, @/marker2, @/marker3, @/marker4, @/marker5, @/marker6 ]
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(0)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@/sma, 1.0E-11, @/inc, 0, @/lans.ElementAt(@/block), @/offsets.ElementAt(0) + @/block * @/blockPhaseOffset, 1.0E-11], 1)
		}
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(1)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@/sma, 1.0E-11, @/inc, 0, @/lans.ElementAt(@/block), @/offsets.ElementAt(1) + @/block * @/blockPhaseOffset, 1.0E-11], 1)
		}
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(2)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@/sma, 1.0E-11, @/inc, 0, @/lans.ElementAt(@/block), @/offsets.ElementAt(2) + @/block * @/blockPhaseOffset, 1.0E-11], 1)
		}
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(3)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@/sma, 1.0E-11, @/inc, 0, @/lans.ElementAt(@/block), @/offsets.ElementAt(3) + @/block * @/blockPhaseOffset, 1.0E-11], 1)
		}
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(4)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@/sma, 1.0E-11, @/inc, 0, @/lans.ElementAt(@/block), @/offsets.ElementAt(4) + @/block * @/blockPhaseOffset, 1.0E-11], 1)
		}
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(5)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@/sma, 1.0E-11, @/inc, 0, @/lans.ElementAt(@/block), @/offsets.ElementAt(5) + @/block * @/blockPhaseOffset, 1.0E-11], 1)
		}
	}

	PARAMETER
	{
		ITERATOR
		{
			type = int
			idx = [0, 1, 2, 3, 4, 5]
		}
		name = "Sat"+@idx
		type = VesselParameterGroup

		vessel = @/vessels.ElementAt(@idx)

		completedMessage = Position of @/vessels.ElementAt(@idx) verified successfully
		rewardFunds = @StationKeepConstellations:stationKeepFunds / @targetBody.Multiplier()

		PARAMETER
		{
			name = Orbit
			type = Orbit

			minPeA = Max(0, @/intAlt - @/altThreshold1)
			maxApA = @/intAlt + @/altThreshold1

			minInclination = Max(0, @/inc - 0.1)
			maxInclination = Min(180, @/inc + 0.1)
		}

		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous

			title = "The satellite should be within "+@/kmDistThreshold3.Print()+" km of the "+@/markers.ElementAt(@../idx)
			hideChildren = !@StationKeepConstellations:DEBUG

			disableOnStateChange = false

			vessel = @/markers.ElementAt(@../idx)
			distance = @/distThreshold3
		}

		duration = 2s
	}

	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = CONTRACT_COMPLETED
		vessel = @/markers.ElementAt(0)
		vessel = @/markers.ElementAt(1)
		vessel = @/markers.ElementAt(2)
		vessel = @/markers.ElementAt(3)
		vessel = @/markers.ElementAt(4)
		vessel = @/markers.ElementAt(5)
	}
}
