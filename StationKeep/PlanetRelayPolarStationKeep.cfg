CONTRACT_TYPE
{
	sortKey = d

	name = PlanetRelayPolarStationKeep
	group = StationKeepConstellations
	agent = Frontier Link

	genericTitle = Planet polar relays station-keeping
	title = @/targetBody+"'s polar relays station-keeping"
	description = It's been more than a year since we last verified position of @/targetBody relays. It is normal for a satellite to drift from its target position over time, we ask you to bring the relays back within margins. If a vessel is already in a correct position, you don't have to do anything other that focusing it.

	maxSimultaneous = 1

	synopsis = Fix @targetBody's relays orbits if necessary
	genericDescription = Fix bodys relays orbits if necessary

	completedMessage = The relays are in position and working!

	prestige = Trivial

	maxExpiry = 21

	targetBody = @/planet

	rewardScience = 0
	rewardReputation = @StationKeepConstellations:stationKeepReputation
	rewardFunds = 2 * @StationKeepConstellations:stationKeepFunds / @targetBody.Multiplier()
	advanceFunds = 0
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	DATA
	{
		type = CelestialBody
		planet = ReachedBodies().Where(b => (b.IsPlanet() && !b.HasSurface() && b.Children().Count() >= 3 && (b.Parent() == (HomeWorld().Parent().IsSun() ? HomeWorld().Parent() : HomeWorld().Parent().Parent()) ) )).SelectUnique()

		requiredValue = true
		uniquenessCheck = CONTRACT_ACTIVE

		title = The target body has to be a reached gas planet in the same solar system with 3+ moons
	}

	DATA
	{
		type = List<double>
		lastStationKeep = $lastStationKeep
		requiredValue = false
	}

	DATA
	{
		type = string
		relayA = @/targetBody+" Relay A"
		relayB = @/targetBody+" Relay B"
		markerA = @/targetBody+" Relay Marker A"
		markerB = @/targetBody+" Relay Marker B"
		hidden = true
	}

	DATA
	{
		type = List<string>
		markers = [ @/markerA, @/markerB ]
		hidden = true
	}

	DATA
	{
		type = List<VesselIdentifier>
		relays = [ @/relayA, @/relayB ]
		hidden = true
	}

	REQUIREMENT
	{
		name = EstablishedA
		type = ValidVessel

		vessel = @/relayA
	}

	REQUIREMENT
	{
		name = EstablishedB
		type = ValidVessel

		vessel = @/relayB
	}

	DATA
	{
		type = double
		met = Max(Vessel(@/relays.ElementAt(0)).MET(), Vessel(@/relays.ElementAt(1)).MET())
		cd = @StationKeepConstellations:stationKeepCD
	}

	REQUIREMENT
	{
		name = OldRelays
		type = Expression

		expression = @/met > @/cd
		title = At least @StationKeepConstellations:stationKeepCD has passed since the relays have been established
	}

	REQUIREMENT
	{
		name = CoolDown
		type = Expression

		expression = ( UniversalTime() - @/lastStationKeep.ElementAt(AllBodies().IndexOf(@/planet)) ) > @/cd
		title = At least @StationKeepConstellations:stationKeepCD has passed since the last station-keeping of the relays
	}

	DATA
	{
		type = double

		sma = Max(5 * (@/targetBody.Radius() + @/targetBody.AtmosphereAltitude()), 1)
		ecc = 0.75
		Pe = @/sma * (1 - @/ecc) - @/targetBody.Radius()
		Ap = @/sma * (1 + @/ecc) - @/targetBody.Radius()

		sensitivity = 2 * Pow(@/sma, 1.5) / Pow(Max(1, @/targetBody.GM()), 0.5) // rate of change of sma in relation to orbital velocity
		multiple = Pow(10, Round(Log(@sensitivity, 10) - 0.5))
		coeff = Max(Round(@sensitivity, @multiple), 1000) // sensitivity rounded to a nice round number

		distSensitivity = 18.84955592153876 * Pow(@/sma, 1.5) / Max(Pow(@/targetBody.GM(), 0.5), 1)
		distMultiple = Pow(10, Round(Log(@distSensitivity, 10) - 0.5))
		distCoeff = Round(@distSensitivity, @distMultiple)

		altThreshold1 = Round(@coeff / 2 + @multiple / 2, @multiple)
		distThreshold3 = @distCoeff
	}

	DATA
	{
		type = long

		intPe = @/Pe
		intAp = @/Ap
		kmDistThreshold3 = Round(@/distThreshold3 / 1000)
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(0)
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody
			vesselType = DroppedPart

			ORBIT
			{
				SMA = @/sma
				ECC = @/ecc
				INC = 90
				LPE = 270
				LAN = 0
				MNA = 0
				EPH = 0
				REF = 0 // ignored
			}
		}

		VESSEL
		{
			name = @/markers.ElementAt(1)
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody
			vesselType = DroppedPart

			ORBIT
			{
				SMA = @/sma
				ECC = @/ecc
				INC = 90
				LPE = 270
				LAN = 0
				MNA = 3.1415926536
				EPH = 0
				REF = 0 // ignored
			}
		}
	}

	PARAMETER
	{
		ITERATOR
		{
			type = int
			idx = [0, 1]
		}
		name = "Relay"+@idx
		type = VesselParameterGroup

		vessel = @/relays.ElementAt(@idx)

		completedMessage = Position of the @/relays.ElementAt(@idx) verified successfully
		rewardFunds = @StationKeepConstellations:stationKeepFunds / @targetBody.Multiplier()

		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Relay
		}

		PARAMETER
		{
			name = Orbit
			type = Orbit

			minPeA = Max(0, @/intPe - @/altThreshold1)
			maxPeA = @/intPe + @/altThreshold1
			minApA = Max(0, @/intAp - @/altThreshold1)
			maxApA = @/intAp + @/altThreshold1

			minInclination = 89.9
			maxInclination = 90.1
		}

		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous

			title = "The relay should be within "+@/kmDistThreshold3.Print()+" km of the "+@/markers.ElementAt(@../idx)
			hideChildren = !@StationKeepConstellations:DEBUG

			disableOnStateChange = false

			vessel = @/markers.ElementAt(@../idx)
			distance = @/distThreshold3
		}

		duration = 2s
	}
	
	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = CONTRACT_COMPLETED
		vessel = @/markers.ElementAt(0)
		vessel = @/markers.ElementAt(1)
	}

	BEHAVIOUR
	{
		name = Expression
		type = Expression
		CONTRACT_COMPLETED_SUCCESS
		{
			type = List<double>
			lastStationKeep = @/lastStationKeep.ReplaceElementAt(AllBodies().IndexOf(@/planet), UniversalTime())
		}
	}
}