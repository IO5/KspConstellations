CONTRACT_TYPE
{
	sortKey = d

	name = MoonRelayFollowUp
	group = RelayConstellations

	genericTitle = Improve moon's communication coverage
	title = Improve @/targetBody communication coverage
	description = We came to the conclusion that current communication coverage of @/targetBody is severely lacking. Adding two more relays would give us constant coverage for most of the surface.

	synopsis = "Add two more relays and form an equilateral triangle of relays in "+@/targetBody+"'s orbit"
	genericDescription = Form an equilateral triangle of relays in moon's orbit

	completedMessage = The relays are in position and working!

	prestige = Trivial

	maxExpiry = 21

	targetBody = @/moon

	rewardScience = 0
	rewardReputation = 1.5 * @RelayConstellations:moonRelayReputation
	rewardFunds = 3 * @RelayConstellations:moonRelayFunds
	advanceFunds = @rewardFunds / 3
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	notes = Target period: @/ogPeriod

	DATA
	{
		type = CelestialBody
		moon = ReachedBodies().Where(b => !b.IsHomeWorld() && b.IsMoon()).SelectUnique()

		requiredValue = true
		uniquenessCheck = GROUP_ACTIVE

		title = The target body has to be a reached before moon
	}

	DATA
	{
		type = double
		hidden = true
		homeAntennaPower = 200000000000
		homeWorldMaxDistanceFromStar = HomeWorld().Orbit().Apoapsis() + (HomeWorld().Parent().IsSun() ? 0 : HomeWorld().Parent().Orbit().Apoapsis())
		maximumSeparation = @/targetBody.Orbit().Apoapsis() + (@/targetBody.Parent() == HomeWorld() ? 0 : @/targetBody.Parent().Orbit().Apoapsis() + @homeWorldMaxDistanceFromStar)
		parentRequiredAntennaPower = Pow(@maximumSeparation + @/targetBody.SphereOfInfluence(), 2) / @/homeAntennaPower
		nextHopRelayPower = (@/targetBody.Parent() == HomeWorld()) ? 2000000000 : (@parentRequiredAntennaPower / 2) // assume 2G for Kerbin moons
		surfaceIntegratedAntennaPower = (@/targetBody.Parent() == HomeWorld()) ? 0 : Pow(@/targetBody.SphereOfInfluence() - @/targetBody.Radius(), 2) / 5000
		requiredAntennaPower = Max(@surfaceIntegratedAntennaPower, Pow(@/targetBody.Orbit().Apoapsis() + @/targetBody.SphereOfInfluence(), 2) / @nextHopRelayPower)
	}

	DATA
	{
		type = string
		relayA = @/targetBody+" Relay A"
		relayB = @/targetBody+" Relay B"
		relayC = @/targetBody+" Relay C"
		markerB = @/targetBody+" Relay Marker B"
		markerC = @/targetBody+" Relay Marker C"
		hidden = true
	}

	DATA
	{
		type = Vessel
		ogRelay = Vessel(VesselIdentifier(@/relayA))
		hidden = true
	}

	DATA
	{
		type = Duration
		ogPeriod = Duration(@/ogRelay.Orbit().Period())
		requiredValue = false
	}

	DATA
	{
		type = List<string>
		relays = [ @/relayB, @/relayC ]
		names = ["The first relay", "The second relay"]
		markers = [ @/markerB, @/markerC ]
	}

	REQUIREMENT
	{
		name = Established
		type = ValidVessel

		vessel = @/relayA
	}

	REQUIREMENT
	{
		name = NotEstablished
		type = ValidVessel

		vessel = @/relayB
		invertRequirement = true
	}

	REQUIREMENT
	{
		name = NotEstablished
		type = ValidVessel

		vessel = @/relayC
		invertRequirement = true
	}

	DATA
	{
		type = double
		hidden = true

		minAlt = (@/targetBody.HasAtmosphere() ? (@/targetBody.Radius() + @/targetBody.AtmosphereAltitude()) : (@/targetBody.Radius() * 1.01))
		maxAlt = @/targetBody.SphereOfInfluence() * 0.9
		maxEcc = 0.001
	}

	REQUIREMENT
	{
		name = StillValid
		type = Expression

		expression = @/ogRelay.CelestialBody() == @/targetBody && @/ogRelay.Orbit().Eccentricity() <= @/maxEcc && @/ogRelay.Orbit().Periapsis() >= @/minAlt && @/ogRelay.Orbit().Apoapsis() <= @/maxAlt
		title = The original relay is still in a valid orbit
	}

	REQUIREMENT
	{
		name = Cooldown
		type = Expression

		expression = @/ogRelay.MET() > @Constellations:constellationCD2
		title = At least @Constellations:constellationCD2 has passed since the original relay was established
	}

	REQUIREMENT
	{
		name = Rendezvous
		type = Rendezvous

		targetBody = HomeWorld()
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(0)
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody
			vesselType = DroppedPart

			ORBIT
			{
				SMA = @/ogRelay.Orbit().SemiMajorAxis()
				ECC = @/ogRelay.Orbit().Eccentricity()
				INC = @/ogRelay.Orbit().Inclination()
				LPE = @/ogRelay.Orbit().ArgumentOfPeriapsis()
				LAN = @/ogRelay.Orbit().LAN()
				MNA = @/ogRelay.Orbit().MeanAnomalyAtEpoch() - 2.0943951
				EPH = @/ogRelay.Orbit().Epoch()
				REF = 0 // ignored
			}
		}

		VESSEL
		{
			name = @/markers.ElementAt(1)
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody
			vesselType = DroppedPart

			ORBIT
			{
				SMA = @/ogRelay.Orbit().SemiMajorAxis()
				ECC = @/ogRelay.Orbit().Eccentricity()
				INC = @/ogRelay.Orbit().Inclination()
				LPE = @/ogRelay.Orbit().ArgumentOfPeriapsis()
				LAN = @/ogRelay.Orbit().LAN()
				MNA = @/ogRelay.Orbit().MeanAnomalyAtEpoch() + 2.0943951
				EPH = @/ogRelay.Orbit().Epoch()
				REF = 0 // ignored
			}
		}
	}

	DATA
	{
		type = double
		sma = Max(@/ogRelay.Orbit().SemiMajorAxis(), 1)

		sensitivity = 2 * Pow(@/sma, 1.5) / Pow(Max(1, @/targetBody.GM()), 0.5) // rate of change of sma in relation to orbital velocity
		multiple = Pow(10, Round(Log(@sensitivity, 10) - 0.5))
		coeff = Max(Round(@sensitivity, @multiple), 1000) // sensitivity rounded to a nice round number

		distSensitivity = 18.84955592153876 * Pow(@/sma, 1.5) / Max(Pow(@/targetBody.GM(), 0.5), 1)
		distMultiple = Pow(10, Round(Log(@distSensitivity, 10) - 0.5))
		distCoeff = Round(@distSensitivity, @distMultiple)

		altThreshold1 = Round(@coeff / 2 + @multiple / 2, @multiple)
		altThreshold2 = Round(@coeff / 40 + @multiple / 20, @multiple / 10)
		altThreshold3 = Round(@coeff / 7500 + 0.5) / 2
		distThreshold1 = @distCoeff / 4
	}

	DATA
	{
		type = long

		intAp = @/ogRelay.Orbit().Apoapsis()
		intPe = @/ogRelay.Orbit().Periapsis()
		kmDistThreshold1 = Round(@/distThreshold1 / 1000)
	}

	PARAMETER
	{
		ITERATOR
		{
			type = int
			idx = [0, 1]
		}
		name = "Relay"+@idx
		type = VesselParameterGroup

		title = @/names.ElementAt(@idx)
		define = @/relays.ElementAt(@idx)

		rewardFunds = @RelayConstellations:moonRelayFunds / 4

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}

		PARAMETER
		{
			name = HasAntenna
			type = HasAntenna
			minAntennaPower = @/requiredAntennaPower
			antennaType = RELAY
		}

		PARAMETER
		{
			name = Any
			type = Any
			title = Have a power generator onboard

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = !@Constellations:DEBUG

				partModule = ModuleDeployableSolarPanel
				minCount = 1
			}

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more generators
				hideChildren = !@Constellations:DEBUG
				
				partModule = ModuleGenerator
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more curved solar panels
				hideChildren = !@Constellations:DEBUG
				
				partModule = ModuleCurvedSolarPanel
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more fission reactors
				hideChildren = !@Constellations:DEBUG
				partModule = FissionReactor
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more radioisotope generators
				hideChildren = !@Constellations:DEBUG
				partModule = ModuleRadioisotopeGenerator
				minCount = 1
			}

			PARAMETER:NEEDS[Kopernicus]
			{
				name = PartValidation
				type = PartValidation
				hideChildren = !@Constellations:DEBUG
				title = 1 or more solar panels
				partModule = KopernicusSolarPanel
				minCount = 1
			}
		}

		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Relay
			disableOnStateChange = false
		}

		PARAMETER
		{
			name = Orbit
			type = Orbit

			title = Match the orbit with less than @/altThreshold1.ToString("N0") m deviation

			minPeA = Max(0, @/intPe - @/altThreshold1)
			maxPeA = @/intPe + @/altThreshold1
			minApA = Max(0, @/intAp - @/altThreshold1)
			maxApA = @/intAp + @/altThreshold1

			minInclination = Max(0, Round(@/ogRelay.Orbit().Inclination(), 0.1) - 0.05)
			maxInclination = Min(180, Round(@/ogRelay.Orbit().Inclination(), 0.1) + 0.049)
		}

		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous

			title = Keep the relay within @/kmDistThreshold1.Print() km of the @/markers.ElementAt(@../idx)

			disableOnStateChange = false

			vessel = @/markers.ElementAt(@../idx)
			distance = @/distThreshold1

			hideChildren = !@Constellations:DEBUG
		}

		PARAMETER
		{
			name = Precision1
			type = VesselParameterGroup

			vessel = @/relays.ElementAt(@../idx)
			title = Match the orbit with less than @/altThreshold2.ToString("N0") m deviation (Optional)
			notes = Target periapsis: @/intPe.Print() m\nTarget apoapsis: @/intAp.Print() m

			optional = True
			rewardReputation = @Constellations:precisionReputation
			rewardFunds = @Constellations:precisionFunds

			hideChildren = !@Constellations:DEBUG

			PARAMETER
			{
				name = Orbit
				type = Orbit

				minPeA = Max(0, @/intPe - @/altThreshold2)
				maxPeA = @/intPe + @/altThreshold2
				minApA = Max(0, @/intAp - @/altThreshold2)
				maxApA = @/intAp + @/altThreshold2

				minInclination = Max(0, Round(@/ogRelay.Orbit().Inclination(), 0.1) - 0.05)
				maxInclination = Min(180, Round(@/ogRelay.Orbit().Inclination(), 0.1) + 0.049)

				hideChildren = !@Constellations:DEBUG
			}
		}

		PARAMETER
		{
			name = Precision2
			type = VesselParameterGroup

			vessel = @/relays.ElementAt(@../idx)
			title = Match the orbit with less than @/altThreshold3.ToString("N0") m deviation (Optional)
			notes = Target periapsis: @/intPe.Print() m\nTarget apoapsis: @/intAp.Print() m

			optional = True
			rewardReputation = 2 * @Constellations:precisionReputation
			rewardFunds = 2 * @Constellations:precisionFunds

			hideChildren = !@Constellations:DEBUG

			PARAMETER
			{
				name = Orbit
				type = Orbit

				minPeA = Max(0, @/intPe - @/altThreshold3)
				maxPeA = @/intPe + @/altThreshold3
				minApA = Max(0, @/intAp - @/altThreshold3)
				maxApA = @/intAp + @/altThreshold3

				minInclination = Max(0, Round(@/ogRelay.Orbit().Inclination(), 0.1) - 0.05)
				maxInclination = Min(180, Round(@/ogRelay.Orbit().Inclination(), 0.1) + 0.049)

				hideChildren = !@Constellations:DEBUG
			}
		}

		duration = 1d
	}

	BEHAVIOUR
	{
		name = DestroyVesselB
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = Relay0
		vessel = @/markers.ElementAt(0)
	}

	BEHAVIOUR
	{
		name = DestroyVesselC
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = Relay1
		vessel = @/markers.ElementAt(1)
	}
}