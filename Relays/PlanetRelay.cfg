CONTRACT_TYPE
{
	sortKey = f

	name = PlanetRelay
	group = RelayConstellations

	genericTitle = Establish a planet relay
	title = Establish @/targetBody relay
	description = "We want't you to place a relay satellite in circular orbit around @/targetBody"+". It will prove useful in our future missions to @/targetBody"+".\nYou are allowed to reuse an existing vessel as the relay."

	synopsis = Place a relay satellite in orbit around @/targetBody
	genericDescription = Place a relay satellite in orbit around the body

	completedMessage = The relay is in position and working!

	prestige = Trivial

	maxExpiry = 21

	targetBody = @/planet

	rewardScience = 0
	rewardReputation = @RelayConstellations:relayReputation
	rewardFunds = @RelayConstellations:relayFunds
	advanceFunds = @rewardFunds / 2
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	DATA
	{
		type = CelestialBody
		planet = ReachedBodies().Where(b => (!b.IsHomeWorld() && b.IsPlanet() && b.HasSurface() && (b.Parent() == (HomeWorld().Parent().IsSun() ? HomeWorld().Parent() : HomeWorld().Parent().Parent()) ) )).SelectUnique()

		requiredValue = true
		uniquenessCheck = GROUP_ACTIVE

		title = The target body has to be a reached planet in the same solar system, that is not a gas giant
	}

	DATA
	{
		type = double
		hidden = true
		homeAntennaPower = 200000000000
		homeWorldMaxDistanceFromStar = HomeWorld().Orbit().Apoapsis() + (HomeWorld().Parent().IsSun() ? 0 : HomeWorld().Parent().Orbit().Apoapsis())
		maximumSeparation = @/targetBody.Orbit().Apoapsis() + @homeWorldMaxDistanceFromStar
		requiredAntennaPower = Pow(@maximumSeparation + @/targetBody.SphereOfInfluence(), 2) / @/homeAntennaPower
	}

	DATA
	{
		type = string
		relay = @/targetBody+" Relay A"
		hidden = true
	}

	REQUIREMENT
	{
		name = NotEstablished
		type = ValidVessel

		vessel = @/relay
		invertRequirement = true
	}

	PARAMETER
	{
		name = VesselParameterGroup
		type = VesselParameterGroup

		define = @/relay

		PARAMETER
		{
			name = Orbit
			type = Orbit

			minAltitude = @/targetBody.HasAtmosphere() ? (@/targetBody.Radius() + @/targetBody.AtmosphereAltitude()) : (@/targetBody.Radius() * 1.01)
			maxAltitude = @/targetBody.SphereOfInfluence() * 0.9

			maxEccentricity = 0.001

			notes = You are free to pick any sufficiently high circular orbit
		}

		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Relay
			disableOnStateChange = false
		}

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}

		PARAMETER
		{
			name = HasAntenna
			type = HasAntenna
			minAntennaPower = @/requiredAntennaPower
			antennaType = RELAY
		}

		PARAMETER
		{
			name = Any
			type = Any
			title = Have a power generator onboard

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = !@Constellations:DEBUG
				partModule = ModuleDeployableSolarPanel
				minCount = 1
			}

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more generators
				hideChildren = !@Constellations:DEBUG
				partModule = ModuleGenerator
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more curved solar panels
				hideChildren = !@Constellations:DEBUG
				partModule = ModuleCurvedSolarPanel
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more fission reactors
				hideChildren = !@Constellations:DEBUG
				partModule = FissionReactor
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more radioisotope generators
				hideChildren = !@Constellations:DEBUG
				partModule = ModuleRadioisotopeGenerator
				minCount = 1
			}

			PARAMETER:NEEDS[Kopernicus]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = !@Constellations:DEBUG
				partModule = KopernicusSolarPanel
				minCount = 1
			}
		}

		duration = 1d
	}
	
	PARAMETER
	{
		name = VesselParameterGroup
		type = VesselParameterGroup

		vessel = @/relay

		title = Launch a new vessel (optional)

		optional = True

		rewardFunds = @RelayConstellations:newRelayFunds

		hideChildren = !@Constellations:DEBUG

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}

		duration = 2s
	}

	PARAMETER
	{
		name = VesselParameterGroup
		type = VesselParameterGroup

		vessel = @/relay
		
		title = Circularize with eccentricity less than 0.00005 (optional)

		optional = True

		rewardReputation = @Constellations:precisionReputation
		rewardFunds = @Constellations:precisionFunds

		hideChildren = !@Constellations:DEBUG

		PARAMETER
		{
			name = Orbit
			type = Orbit

			maxEccentricity = 0.00005
		}

		duration = 2s
	}
}
