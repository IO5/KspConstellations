CONTRACT_TYPE
{
	sortKey = k

	name = OldKsoRelayReplace
	group = RelayConstellations

	title = Replace aging kerbostationary relays
	description = The kerbostationary relays have served us well, but we're going to need stronger antennas if we want to explore our solar system further.

	synopsis = Replace the old relays with new, stronger ones.

	maxCompletions = 1
	maxSimultaneous = 1

	completedMessage = The relays are in position and working!

	prestige = Significant

	maxExpiry = 21

	targetBody = HomeWorld()

	notes = Required deltaV from Low @/targetBody Orbit: @/deltaV.Print() m/s \nDon't forget to leave some fuel for station-keeping!

	rewardScience = 0
	rewardReputation = @RelayConstellations:ksoReplacementBaseReputation * (@/numOfRelaysToReplace / 3.0)
	rewardFunds = @RelayConstellations:ksoReplacementBaseFunds * (@/numOfRelaysToReplace / 3.0)
	advanceFunds = @rewardFunds / 4
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	DATA
	{
		type = double
	}

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract

		contractType = KsoRelayFollowUp
		cooldownDuration = @Constellations:relayReplaceCD
	}

	REQUIREMENT
	{
		name = TechResearched
		type = TechResearched

		part = RelayAntenna100
	}

	DATA
	{
		type = VesselIdentifier
		relayA = KSO Relay A
		relayB = KSO Relay B
		relayC = KSO Relay C
	}

	DATA
	{
		type = string
		markerA = KSO Relay Marker A
		markerB = KSO Relay Marker B
		markerC = KSO Relay Marker C
		hidden = true
	}

	DATA
	{
		type = List<VesselIdentifier>
		relays = [ @/relayA, @/relayB, @/relayC ]
		markers = [ @/markerA, @/markerB, @/markerC ]
		hidden = true
	}

	REQUIREMENT
	{
		name = NeedsReplacement
		type = Expression

		expression = @/numOfRelaysToReplace > 0
		title = At least one of KSO Relays has to have an antenna weaker than @/requiredAntennaPower.Print()
	}

	DATA
	{
		type = Vessel
		ogRelay = Vessel(@/relayA)
		ogRelay2 = Vessel(@/relayB)
		ogRelay3 = Vessel(@/relayC)
		requiredValue = false
	}

	REQUIREMENT
	{
		name = EstablishedA
		type = ValidVessel

		vessel = @/relayA
	}

	REQUIREMENT
	{
		name = EstablishedB
		type = ValidVessel

		vessel = @/relayB
	}

	REQUIREMENT
	{
		name = EstablishedC
		type = ValidVessel

		vessel = @/relayC
	}

	REQUIREMENT
	{
		name = ValidOrbit
		type = Expression

		expression = Vessel(@/relayA).Orbit().Apoapsis() <= @/maxSma && Vessel(@/relayA).Orbit().Periapsis() >= @/minSma && Vessel(@/relayA).Orbit().Inclination() < 0.049
		title = The original relay is still in a valid orbit
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(0)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@/sma, 1.0E-11, 0, Vessel(@/relayA).Orbit().ArgumentOfPeriapsis(), Vessel(@/relayA).Orbit().LAN(), Vessel(@/relayA).Orbit().MeanAnomalyAtEpoch(), Vessel(@/relayA).Orbit().Epoch()], 1)
		}

		VESSEL
		{
			name = @/markers.ElementAt(1)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@/sma, 1.0E-11, 0, Vessel(@/relayA).Orbit().ArgumentOfPeriapsis(), Vessel(@/relayA).Orbit().LAN(), Vessel(@/relayA).Orbit().MeanAnomalyAtEpoch() + 2.0943951023931953, Vessel(@/relayA).Orbit().Epoch()], 1)
		}

		VESSEL
		{
			name = @/markers.ElementAt(2)
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@/sma, 1.0E-11, 0, Vessel(@/relayA).Orbit().ArgumentOfPeriapsis(), Vessel(@/relayA).Orbit().LAN(), Vessel(@/relayA).Orbit().MeanAnomalyAtEpoch() - 2.0943951023931953, Vessel(@/relayA).Orbit().Epoch()], 1)
		}
	}

	DATA
	{
		type = double
		requiredAntennaPower = 200000000000 // 200G
		numOfRelaysToReplace = @/relays.Where(vi => Vessel(vi).AntennaRelayPower() < @/requiredAntennaPower).Count()

		sma = Pow((@/targetBody.GM() * Pow(@/targetBody.RotationalPeriod(), 2)) / 39.478417604357432, 0.3333333333333333)
		minSma = @/sma - @/altThreshold1 - @/targetBody.Radius()
		maxSma = @/sma + @/altThreshold1 - @/targetBody.Radius()
		graveyardSma = Round(@sma * 1.05, 10000)

		sensitivity = 2 * Pow(@/sma, 1.5) / Pow(Max(1, @/targetBody.GM()), 0.5) // rate of change of sma in relation to orbital velocity
		multiple = Pow(10, Round(Log(@sensitivity, 10) - 0.5))
		coeff = Max(Round(@sensitivity, @multiple), 1000) // sensitivity rounded to a nice round number

		distSensitivity = 18.84955592153876 * Pow(@/sma, 1.5) / Max(Pow(@/targetBody.GM(), 0.5), 1)
		distMultiple = Pow(10, Round(Log(@distSensitivity, 10) - 0.5))
		distCoeff = Round(@distSensitivity, @distMultiple)

		altThreshold1 = Round(@coeff / 2 + @multiple / 2, @multiple)
		altThreshold2 = Round(@coeff / 40 + @multiple / 20, @multiple / 10)
		altThreshold3 = Round(@coeff / 7500 + 0.5) / 2
		distThreshold1 = @distCoeff / 4

		r1 = @/targetBody.Radius() + @/targetBody.AtmosphereAltitude()
		deltaV = Pow(@/targetBody.GM() / @r1, 0.5) * (Pow(2 * @/sma / (@r1 + @/sma), 0.5) - 1) + Pow(@/targetBody.GM() / @/sma, 0.5) * (1 - Pow(2 * @/r1 / (@r1 + @/sma), 0.5))
	}

	DATA
	{
		type = long

		intAlt = Round(@/sma - @/targetBody.Radius())
		graveyardAlt = Round(@/graveyardSma - @/targetBody.Radius())
		kmDistThreshold1 = Round(@/distThreshold1 / 1000)
	}

	PARAMETER
	{
		// cleanup unneeded markers hax
		ITERATOR
		{
			type = int
			idx = [0, 1, 2]
		}
		name = "Cleanup"+@idx
		type = Duration
		hidden = !@Constellations:DEBUG
		title = cleanup
		optional = true

		duration = 1s
		preWaitText = ""
		waitingText = ""
		completionText = ""

		REQUIREMENT
		{
			name = StrongEnough
			type = Expression

			expression = Vessel(@/relays.ElementAt(@../idx)).AntennaRelayPower() >= @/requiredAntennaPower
		}
	}

	PARAMETER
	{
		name = RetireAll
		type = All

		title = Get rid of the old relays
		disableOnStateChange = false

		PARAMETER
		{
			ITERATOR
			{
				type = int
				idx = [0, 1, 2]
			}
			name = "RetireRelay"+@idx
			type = Any
			title = @Deorbit/vessel
			disableOnStateChange = false

			REQUIREMENT
			{
				name = NotStrongEnough
				type = Expression

				expression = Vessel(@/relays.ElementAt(@../idx)).AntennaRelayPower() < @/requiredAntennaPower
			}

			PARAMETER
			{
				name = Deorbit
				type = VesselParameterGroup

				vessel = Vessel(@/relays.ElementAt(@../idx))
				hideChildren = !@Constellations:DEBUG

				title = deorbit @vessel

				// reward for not leaving trash
				rewardReputation = @Constellations:precisionReputation
				rewardFunds = @Constellations:precisionFunds

				PARAMETER
				{
					name = VesselDestroyed
					type = VesselDestroyed
				}
			}

			PARAMETER
			{
				name = Graveyard
				type = VesselParameterGroup

				vessel = Vessel(@/relays.ElementAt(@../idx))
				title = or move it to a graveyard orbit (above @/graveyardAlt.Print() m)
				hideChildren = !@Constellations:DEBUG
				disableOnStateChange = false

				PARAMETER
				{
					name = Orbit
					type = Orbit

					minAltitude = @/graveyardAlt
				}
			}
		}
	}

	PARAMETER
	{
		ITERATOR
		{
			type = int
			idx = [0, 1, 2]
		}
		name = "Relay"+@idx
		type = VesselParameterGroup

		REQUIREMENT
		{
			name = NotStrongEnough
			type = Expression

			expression = Vessel(@/relays.ElementAt(@../idx)).AntennaRelayPower() < @/requiredAntennaPower
		}

		title = Launch and position the @/relays.ElementAt(@idx) replacement
		define = @/relays.ElementAt(@idx)

		rewardFunds = @RelayConstellations:ksoReplacementBaseFunds / 10

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}

		PARAMETER
		{
			name = HasAntenna
			type = HasAntenna
			minAntennaPower = 200000000000 // 200G
			antennaType = RELAY
		}

		PARAMETER
		{
			name = PowerGenerator
			type = Any
			title = Have solar panels onboard
			hideChildren = !@Constellations:DEBUG

			PARAMETER
			{
				name = StockSolarGenerator
				type = PartValidation
				partModule = ModuleDeployableSolarPanel
				hideChildren = !@Constellations:DEBUG
				minCount = 1
			}
		
			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = NFSolarGenerator
				type = PartValidation
				partModule = ModuleCurvedSolarPanel
				hideChildren = !@Constellations:DEBUG
				minCount = 1
			}
		
			PARAMETER:NEEDS[Kopernicus]
			{
				name = KopernicusSolarGenerator
				type = PartValidation
				partModule = KopernicusSolarPanel
				hideChildren = !@Constellations:DEBUG
				minCount = 1
			}
		}

		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Relay
			disableOnStateChange = false
		}

		PARAMETER
		{
			name = Orbit
			type = Orbit

			title = Circularize at @/intAlt.Print() m with less than @/altThreshold1.ToString("N0") m deviation

			minPeA = Max(0, @/intAlt - @/altThreshold1)
			maxApA = @/intAlt + @/altThreshold1

			maxInclination = 0.049
		}

		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous

			title = Keep the relay within @/kmDistThreshold1.Print() km of the @/markers.ElementAt(@../idx)

			disableOnStateChange = false

			vessel = @/markers.ElementAt(@../idx)
			distance = @/distThreshold1

			hideChildren = !@Constellations:DEBUG
		}

		PARAMETER
		{
			name = Precision1
			type = VesselParameterGroup

			vessel = @/relays.ElementAt(@../idx)
			title = Circularize at @/intAlt.Print() m with less than @/altThreshold2.ToString("N0") m deviation (Optional)

			optional = True
			rewardReputation = @Constellations:precisionReputation
			rewardFunds = @Constellations:precisionFunds

			hideChildren = !@Constellations:DEBUG

			PARAMETER
			{
				name = Orbit
				type = Orbit

				minPeA = Max(0, @/intAlt - @/altThreshold2)
				maxApA = @/intAlt + @/altThreshold2

				maxInclination = 0.049

				hideChildren = !@Constellations:DEBUG
			}
		}

		PARAMETER
		{
			name = Precision2
			type = VesselParameterGroup

			vessel = @/relays.ElementAt(@../idx)
			title = Circularize at @/intAlt.Print() m with less than @/altThreshold3.ToString("N0") m deviation (Optional)

			optional = True
			rewardReputation = 2 * @Constellations:precisionReputation
			rewardFunds = 2 * @Constellations:precisionFunds

			hideChildren = !@Constellations:DEBUG

			PARAMETER
			{
				name = Orbit
				type = Orbit

				minPeA = Max(0, @/intAlt - @/altThreshold3)
				maxApA = @/intAlt + @/altThreshold3

				maxInclination = 0.049

				hideChildren = !@Constellations:DEBUG
			}
		}

		duration = 1d
	}

	BEHAVIOUR
	{
		name = DestroyVesselA
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = Cleanup0
		parameter = Relay0
		vessel = @/markers.ElementAt(0)
	}

	BEHAVIOUR
	{
		name = DestroyVesselB
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = Cleanup1
		parameter = Relay1
		vessel = @/markers.ElementAt(1)
	}

	BEHAVIOUR
	{
		name = DestroyVesselC
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = Cleanup2
		parameter = Relay2
		vessel = @/markers.ElementAt(2)
	}

//	BEHAVIOUR
//	{
//		name = DestroyVesselA2
//		type = DestroyVessel
//		onState = CONTRACT_COMPLETED
//		vessel = @/markers.ElementAt(0)
//	}
//
//	BEHAVIOUR
//	{
//		name = DestroyVesselB2
//		type = DestroyVessel
//		onState = CONTRACT_COMPLETED
//		vessel = @/markers.ElementAt(1)
//	}
//
//	BEHAVIOUR
//	{
//		name = DestroyVesselC2
//		type = DestroyVessel
//		onState = CONTRACT_COMPLETED
//		vessel = @/markers.ElementAt(2)
//	}

	DATA
	{
		type = List<String>
		ogNames = [ @/ogRelay.VesselName(), @/ogRelay2.VesselName(), @/ogRelay3.VesselName() ]
		requiredValue = false
	}
}