CONTRACT_TYPE
{
	sortKey = j

	name = OldRelayReplace
	group = RelayConstellations

	genericTitle = Replace aging relay
	title = Replace aging @/ogRelay in the orbit of @/targetBody
	description = The relay around @/targetBody has been serving us for a while, but its antenna is far from state-of-the-art. Ideally, we would like a relay strong enough to reach vessels equipped with nothing more than pod-integrated antenna. 

	synopsis = Deorbit the old @/targetBody relay and put a new, stronger one in its place.
	genericDescription = Deorbit the old relay and put a new, stronger one in its place.

	completedMessage = The relay is in position and working!

	prestige = Trivial

	maxExpiry = 21

	targetBody = @/targetBody1

	rewardScience = 0
	rewardReputation = 0.5 * @RelayConstellations:relayReputation
	rewardFunds = 2 * @RelayConstellations:relayFunds
	advanceFunds = @rewardFunds / 3
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	notes = Target period: @/ogPeriod

	DATA
	{
		type = CelestialBody
		targetBody1 = OrbitedBodies().Where(b => !b.IsHomeWorld() && (b.IsMoon() || (b.IsPlanet() && b.HasSurface())) ).SelectUnique()

		requiredValue = true
		uniquenessCheck = GROUP_ACTIVE

		title = The target body has to be an orbited before body
	}

	DATA
	{
		type = double
		hidden = true
		podAntennaPower = 5000
		minRange = 1.5 * (@/targetBody.Radius() + (@/targetBody.HasAtmosphere() ? @/targetBody.AtmosphereAltitude() : 0))
		requiredAntennaPower = Pow(@minRange, 2) / @podAntennaPower
	}

	DATA
	{
		type = string
		relayA = @/targetBody+" Relay A"
		relayB = @/targetBody+" Relay B"
		relayC = @/targetBody+" Relay C"
		marker = @/targetBody+" Relay Replacement Marker"
		newRelay = @/relayToReplace // has to be the same for station-keeping to work
		hidden = true
	}

	DATA
	{
		type = List<VesselIdentifier>
		relays = [ @/relayA, @/relayB, @/relayC ]
		hidden = true
	}

	DATA
	{
		type = VesselIdentifier
		relayToReplace = @relays.Where(vi => Vessel(vi).AntennaRelayPower() < @/requiredAntennaPower).SelectUnique()

		requiredValue = true
		uniquenessCheck = GROUP_ACTIVE

		title = The relay has to have an antenna not strong enough to reach a surface-based pod-integrated antenna
	}

	DATA
	{
		type = Vessel
		ogRelay = Vessel(@/relayToReplace)
		requiredValue = false
	}
	
	REQUIREMENT
	{
		name = EstablishedA
		type = ValidVessel

		vessel = @/relayA
	}

	REQUIREMENT
	{
		name = EstablishedB
		type = ValidVessel

		vessel = @/relayB
	}

	REQUIREMENT
	{
		name = EstablishedC
		type = ValidVessel

		vessel = @/relayC
	}

	DATA
	{
		type = double
		met = Max(Vessel(@/relays.ElementAt(1)).MET(), Vessel(@/relays.ElementAt(2)).MET())
		cd = @Constellations:relayReplaceCD
	}

	REQUIREMENT
	{
		name = OldRelays
		type = Expression

		expression = @/met > @/cd
		title = At least @Constellations:relayReplaceCD has passed since the relays around the body have been established
	}

	DATA
	{
		type = double
		hidden = true

		minAlt = (@/targetBody.HasAtmosphere() ? (@/targetBody.Radius() + @/targetBody.AtmosphereAltitude()) : (@/targetBody.Radius() * 1.01))
		maxAlt = @/targetBody.SphereOfInfluence() * 0.9
		maxEcc = 0.001
	}

	REQUIREMENT
	{
		name = StillValid
		type = Expression

		expression = Vessel(@/relayToReplace).CelestialBody() == @/targetBody && Vessel(@/relayToReplace).Orbit().Eccentricity() <= @/maxEcc && Vessel(@/relayToReplace).Orbit().Periapsis() >= @/minAlt && Vessel(@/relayToReplace).Orbit().Apoapsis() <= @/maxAlt
		title = The original relay is still in a valid orbit
	}

	REQUIREMENT
	{
		name = TechResearched
		type = TechResearched

		part = RelayAntenna100
	}

	DATA
	{
		type = Duration
		ogPeriod = Duration(@/ogRelay.Orbit().Period())
		requiredValue = false
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/marker
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody
			vesselType = DroppedPart

			ORBIT
			{
				SMA = @/ogRelay.Orbit().SemiMajorAxis()
				ECC = @/ogRelay.Orbit().Eccentricity()
				INC = @/ogRelay.Orbit().Inclination()
				LPE = @/ogRelay.Orbit().ArgumentOfPeriapsis()
				LAN = @/ogRelay.Orbit().LAN()
				MNA = @/ogRelay.Orbit().MeanAnomalyAtEpoch()
				EPH = @/ogRelay.Orbit().Epoch()
				REF = 0 // ignored
			}
		}
	}

	DATA
	{
		type = double
		sma = Max(@/ogRelay.Orbit().SemiMajorAxis(), 1)

		sensitivity = 2 * Pow(@/sma, 1.5) / Pow(Max(1, @/targetBody.GM()), 0.5) // rate of change of sma in relation to orbital velocity
		multiple = Pow(10, Round(Log(@sensitivity, 10) - 0.5))
		coeff = Max(Round(@sensitivity, @multiple), 1000) // sensitivity rounded to a nice round number

		distSensitivity = 18.84955592153876 * Pow(@/sma, 1.5) / Max(Pow(@/targetBody.GM(), 0.5), 1)
		distMultiple = Pow(10, Round(Log(@distSensitivity, 10) - 0.5))
		distCoeff = Round(@distSensitivity, @distMultiple)

		altThreshold1 = Round(@coeff / 2 + @multiple / 2, @multiple)
		altThreshold2 = Round(@coeff / 40 + @multiple / 20, @multiple / 10)
		altThreshold3 = Round(@coeff / 7500 + 0.5) / 2
		distThreshold1 = @distCoeff / 4
	}

	DATA
	{
		type = long

		intAp = @/ogRelay.Orbit().Apoapsis()
		intPe = @/ogRelay.Orbit().Periapsis()
		kmDistThreshold1 = Round(@/distThreshold1 / 1000)
	}

	PARAMETER
	{
		name = OldRelay
		type = VesselParameterGroup

		vessel = @/ogRelay

		title = Deorbit @/ogRelay
		hideChildren = !@Constellations:DEBUG

		PARAMETER
		{
			name = VesselDestroyed
			type = VesselDestroyed

			// buggy
			// mustImpactTerrain = true
		}
	}

	BEHAVIOUR
	{
		name = Message
		type = Message

		title = Contract Parameter Complete

		message = Deorbit @/ogRelay

		CONDITION
		{
			condition = PARAMETER_COMPLETED
			parameter = OldRelay
		}
	}

	PARAMETER
	{
		name = NewRelay
		type = VesselParameterGroup

		title = Launch a new relay and put it in the same coordinates as the old one
		define = @/newRelay

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}

		PARAMETER
		{
			name = HasAntenna
			type = HasAntenna
			minAntennaPower = @/requiredAntennaPower
			antennaType = RELAY
		}

		PARAMETER
		{
			name = Any
			type = Any
			title = Have a power generator onboard

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = !@Constellations:DEBUG

				partModule = ModuleDeployableSolarPanel
				minCount = 1
			}

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more generators
				hideChildren = !@Constellations:DEBUG
				
				partModule = ModuleGenerator
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more curved solar panels
				hideChildren = !@Constellations:DEBUG
				
				partModule = ModuleCurvedSolarPanel
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more fission reactors
				hideChildren = !@Constellations:DEBUG
				partModule = FissionReactor
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more radioisotope generators
				hideChildren = !@Constellations:DEBUG
				partModule = ModuleRadioisotopeGenerator
				minCount = 1
			}

			PARAMETER:NEEDS[Kopernicus]
			{
				name = PartValidation
				type = PartValidation
				hideChildren = !@Constellations:DEBUG
				title = 1 or more solar panels
				partModule = KopernicusSolarPanel
				minCount = 1
			}
		}

		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Relay
			disableOnStateChange = false
		}

		PARAMETER
		{
			name = Orbit
			type = Orbit

			title = Match the orbit with less than @/altThreshold1.ToString("N0") m deviation

			minPeA = Max(0, @/intPe - @/altThreshold1)
			maxPeA = @/intPe + @/altThreshold1
			minApA = Max(0, @/intAp - @/altThreshold1)
			maxApA = @/intAp + @/altThreshold1

			minInclination = Max(0, Round(@/ogRelay.Orbit().Inclination(), 0.1) - 0.05)
			maxInclination = Min(180, Round(@/ogRelay.Orbit().Inclination(), 0.1) + 0.049)
		}

		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous

			title = Keep the relay within @/kmDistThreshold1.Print() km of the @/marker

			disableOnStateChange = false

			vessel = @/marker
			distance = @/distThreshold1

			hideChildren = !@Constellations:DEBUG
		}

		PARAMETER
		{
			name = Precision1
			type = VesselParameterGroup

			vessel = @/newRelay
			title = Match the orbit with less than @/altThreshold2.ToString("N0") m deviation (Optional)
			notes = Target periapsis: @/intPe.Print() m\nTarget apoapsis: @/intAp.Print() m

			optional = True
			rewardReputation = @Constellations:precisionReputation
			rewardFunds = @Constellations:precisionFunds

			hideChildren = !@Constellations:DEBUG

			PARAMETER
			{
				name = Orbit
				type = Orbit

				minPeA = Max(0, @/intPe - @/altThreshold2)
				maxPeA = @/intPe + @/altThreshold2
				minApA = Max(0, @/intAp - @/altThreshold2)
				maxApA = @/intAp + @/altThreshold2

				minInclination = Max(0, Round(@/ogRelay.Orbit().Inclination(), 0.1) - 0.05)
				maxInclination = Min(180, Round(@/ogRelay.Orbit().Inclination(), 0.1) + 0.049)

				hideChildren = !@Constellations:DEBUG
			}
		}

		PARAMETER
		{
			name = Precision2
			type = VesselParameterGroup

			vessel = @/newRelay
			title = Match the orbit with less than @/altThreshold3.ToString("N0") m deviation (Optional)
			notes = Target periapsis: @/intPe.Print() m\nTarget apoapsis: @/intAp.Print() m

			optional = True
			rewardReputation = 2 * @Constellations:precisionReputation
			rewardFunds = 2 * @Constellations:precisionFunds

			hideChildren = !@Constellations:DEBUG

			PARAMETER
			{
				name = Orbit
				type = Orbit

				minPeA = Max(0, @/intPe - @/altThreshold3)
				maxPeA = @/intPe + @/altThreshold3
				minApA = Max(0, @/intAp - @/altThreshold3)
				maxApA = @/intAp + @/altThreshold3

				minInclination = Max(0, Round(@/ogRelay.Orbit().Inclination(), 0.1) - 0.05)
				maxInclination = Min(180, Round(@/ogRelay.Orbit().Inclination(), 0.1) + 0.049)

				hideChildren = !@Constellations:DEBUG
			}
		}

		duration = 1d
	}

	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = CONTRACT_COMPLETED
		vessel = @/marker
	}
}