CONTRACT_TYPE
{
	sortKey = a

	name = LKOSatellite
	group = KerbinConstellations

	title = Launch a satellite into low @/targetBody orbit

	DATA
	{
		type = string
		desc1 = We found a prospecting client who is willing to pay an exorbitant amount of money for launching their satellite into orbit. An "orbitant" amount would be more suiting for a space program, but we didn't argue.
		desc2 = ComTech needs a new satellite in low @/targetBody orbit. They are willing to pay premium and we could use those funds.
		desc3 = The Secret Serv... I mean a private company has reached out to us to help them launch a spy satellite... I mean a satellite to spy bids... to track their migrations. Yes. They don't want you looking into the specs too much, because... no reason.
	}

	DATA
	{
		type = List<string>
		descs = [@/desc1, @/desc2, @/desc3]
	}

	description = @/descs.Random()
	genericDescription = @synopsis

	completedMessage = The satellite is in position and working!

	maxSimultaneous = 1

	synopsis = Launch a satellite into low @/targetBody orbit

	prestige = Trivial

	maxExpiry = 21

	targetBody = HomeWorld()

	DATA
	{
		type = int
		satCounter = $Constellations_Sat_Counter
	}

	BEHAVIOUR
	{
		name = Expression
		type = Expression
		CONTRACT_COMPLETED_SUCCESS
		{
			Constellations_Sat_Counter = @/satCounter + 1
		}
	}

	DATA
	{
		type = double

		difficulty = Pow(Random(0, Max(Reputation()/1000, 0)), 0.25)
		inc = 60 * @difficulty
		maxSma = @/targetBody.Radius() * 1.31392246115
		minSma = @/targetBody.Radius() + @/targetBody.AtmosphereAltitude()
		sma = (@maxSma - @minSma) * @difficulty + @minSma

		reputation = 6 * @difficulty + 2
		minFunds = 15 * HomeWorld().Radius() / 600
		maxFunds = @minFunds * 1.5 // LKO is smol
		funds = ((@maxFunds - @minFunds) * @difficulty + @minFunds) * (4/(@/satCounter + 8) + 0.5)
		fundsMultiple = Pow(10, Round(Log(@funds, 10) - 1.5)) / 2
	}

	rewardScience = 0
	rewardReputation = @/reputation
	rewardFunds = Round(@/funds, @/fundsMultiple)
	advanceFunds = @rewardFunds / 4
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	DATA
	{
		type = double
		rng = Random()
	}

	REQUIREMENT
	{
		name = Rng
		type = Expression
		expression = @/rng > 0.5
		checkOnActiveContract = false
		title = Random chance
	}

	REQUIREMENT
	{
		name = Orbit
		type = Orbit

		checkType = UNMANNED
	}

	BEHAVIOUR
	{
		name = OrbitGenerator
		type = OrbitGenerator

		FIXED_ORBIT
		{
			ORBIT = CreateOrbit([@/sma, 1.0E-11, @/inc, 0, Random(0, 360), 0, 0], 1)
		}
	}

	PARAMETER
	{
		name = Satellite
		type = VesselParameterGroup

		defineList = initialSats

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}

		PARAMETER
		{
			name = HasAntenna
			type = HasAntenna
			minAntennaPower = 1500000
			antennaType = EITHER
		}

		PARAMETER
		{
			name = Any
			type = Any
			title = Have solar panels onboard

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = true

				partModule = ModuleDeployableSolarPanel
				minCount = 1
			}
		
			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more curved solar panels
				hideChildren = true
				
				partModule = ModuleCurvedSolarPanel
				minCount = 1
			}
		
			PARAMETER:NEEDS[Kopernicus]
			{
				name = PartValidation
				type = PartValidation
				hideChildren = true
				title = 1 or more solar panels
				partModule = KopernicusSolarPanel
				minCount = 1
			}
		}

		PARAMETER
		{
			name = ReachSpecificOrbit
			type = ReachSpecificOrbit

			disableOnStateChange = false

			index = 0
			deviationWindow = (1 - @/difficulty) * 7.5 + 0.5
		}

		duration = 2s
	}
}
