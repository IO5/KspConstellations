CONTRACT_TYPE
{
	sortKey = c

	name = PolarSatellite
	group = KerbinConstellations

	title = "Launch a satellite into "+@/targetBody+"'s polar orbit"

	DATA
	{
		type = string
		desc1 = We found a prospecting client who is willing to pay an exorbitant amount of money for launching their satellite into orbit. An "orbitant" amount would be more suiting for the space program, but we didn't argue.
		desc2 = "ComTech needs a new satellite in "+@/targetBody+"'s polar orbit. They are willing to pay premium and we could use those funds."
		desc3 = The Kerbalkind calls for more TV channels and ComTech will answer! They need our help to launch a new satellite though.
	}

	DATA
	{
		type = List<string>
		descs = [@/desc1, @/desc2, @/desc3]
	}

	description = @/descs.Random()
	genericDescription = @synopsis

	completedMessage = The satellite is in position and working!

	maxSimultaneous = 1

	synopsis = "Launch a satellite into "+@/targetBody+"'s polar orbit"

	prestige = Trivial

	maxExpiry = 21

	targetBody = HomeWorld()

	notes = Required deltaV from Low @/targetBody Orbit: @/deltaV.Print() m/s \nDon't forget to leave some fuel for deorbiting!

	DATA
	{
		type = int
		satCounter = $Constellations_Sat_Counter
	}

	BEHAVIOUR
	{
		name = Expression
		type = Expression
		CONTRACT_COMPLETED_SUCCESS
		{
			Constellations_Sat_Counter = @/satCounter + 1
		}
	}

	DATA
	{
		type = double

		difficulty = Random(0, Max(Reputation()/1000, 0))
		inc = Min(80 + 15 * @difficulty, 90)
		minSma = @/targetBody.Radius() * 1.2
		maxSma = Pow((@/targetBody.GM() * Pow(@/targetBody.RotationalPeriod() / 3, 2)) / 39.478417604357432, 0.3333333333333333)
		sma = (@maxSma - @minSma) * @difficulty + @minSma

		reputation = 6 * @difficulty + 2
		minFunds = 22.5 * HomeWorld().Radius() / 600
		maxFunds = @minFunds * 2.22
		funds = ((@maxFunds - @minFunds) * @difficulty + @minFunds) * (4/(@/satCounter + 8) + 0.5)
		fundsMultiple = Pow(10, Round(Log(@funds, 10) - 0.5)) / 2

		r1 = @/targetBody.Radius() + @/targetBody.AtmosphereAltitude()
		deltaV = Pow(@/targetBody.GM() / @r1, 0.5) * (Pow(2 * @/sma / (@r1 + @/sma), 0.5) - 1) + Pow(@/targetBody.GM() / @/sma, 0.5) * (1 - Pow(2 * @/r1 / (@r1 + @/sma), 0.5))
	}

	rewardScience = 0
	rewardReputation = @/reputation
	rewardFunds = Round(@/funds, @/fundsMultiple)
	advanceFunds = @rewardFunds / 4
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	DATA
	{
		type = double
		rng = Random()
	}

	REQUIREMENT
	{
		name = Rng
		type = Expression
		expression = @/rng > 0.5
		checkOnActiveContract = false
		title = Random chance
	}

	REQUIREMENT
	{
		name = TechResearched
		type = TechResearched

		part = HighGainAntenna5
	}

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract

		contractType = LKOSatellite
	}

	BEHAVIOUR
	{
		name = OrbitGenerator
		type = OrbitGenerator

		FIXED_ORBIT
		{
			ORBIT = CreateOrbit([@/sma, 1.0E-11, @/inc, 0, Random(0, 360), 0, 0], 1)
		}
	}

	PARAMETER
	{
		name = Satellite
		type = VesselParameterGroup

		defineList = initialSats

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}

		PARAMETER
		{
			name = Antenna
			type = Any

			hideChildren = !@Constellations:DEBUG
			title = Antenna (relay or transmit) rating (combined): At least 10M

			PARAMETER
			{
				name = HasAntenna
				type = HasAntenna
				minAntennaPower = 10000000 // 10M
				antennaType = TRANSMIT
			}

			PARAMETER
			{
				name = HasAntenna
				type = HasAntenna
				minAntennaPower = 10000000 // 10M
				antennaType = RELAY
			}
		}

		PARAMETER
		{
			name = Any
			type = Any
			title = Have solar panels onboard

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = true

				partModule = ModuleDeployableSolarPanel
				minCount = 1
			}
		
			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more curved solar panels
				hideChildren = true
				
				partModule = ModuleCurvedSolarPanel
				minCount = 1
			}
		
			PARAMETER:NEEDS[Kopernicus]
			{
				name = PartValidation
				type = PartValidation
				hideChildren = true
				title = 1 or more solar panels
				partModule = KopernicusSolarPanel
				minCount = 1
			}
		}

		PARAMETER
		{
			name = ReachSpecificOrbit
			type = ReachSpecificOrbit

			disableOnStateChange = false

			index = 0
			deviationWindow = (1 - @/difficulty) * 9.5 + 0.5
		}

		duration = 2s
	}
}
