
CONTRACT_TYPE
{
	sortKey = e

	name = KerbinSentinel
	group = KerbinConstellations

	title = "Launch an infrared telescope into "+@/targetBody+"'s orbit"

	description = Apparently space telescopes have more uses than just tracking asteroids. If we place one in a high @/targetBody orbit, we can then use it for deep space observations. Unfortunately, we weren't able to secure much funding but hey... it will make scientists very happy.

	completedMessage = The telescope is in position and working!

	maxSimultaneous = 1
	maxCompletions = 1

	synopsis = "Launch SENTINEL telescope into "+@/targetBody+"'s orbit"

	prestige = Significant
	agent = Kerbal Society for Science

	maxExpiry = 90

	targetBody = HomeWorld()

	notes = Required deltaV from Low @/targetBody Orbit: @/deltaV.Print() m/s

	rewardScience = 150
	rewardReputation = 40
	rewardFunds = 20 * HomeWorld().Radius() / 600
	advanceFunds = 0
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	DATA
	{
		type = double
		// value pulled out of an ass, should be 4600000 for stock
		tmp = 1.32819993682 * Pow((@/targetBody.GM() * Pow(@/targetBody.RotationalPeriod(), 2)) / 39.478417604357432, 0.3333333333333333)
		sma = Max(Round(@tmp, 100000), 100000)

		r1 = @/targetBody.Radius() + @/targetBody.AtmosphereAltitude()
		deltaV = Pow(@/targetBody.GM() / @r1, 0.5) * (Pow(2 * @/sma / (@r1 + @/sma), 0.5) - 1) + Pow(@/targetBody.GM() / @/sma, 0.5) * (1 - Pow(2 * @/r1 / (@r1 + @/sma), 0.5))
	}

	REQUIREMENT
	{
		name = TechResearched
		type = TechResearched

		part = InfraredTelescope
	}

	REQUIREMENT
	{
		name = SynchronoushOrbitPossible
		type = Expression
		title = Kerbostationary orbit around HomeWorld() is possible
		expression = HomeWorld().CanHaveSynchronousOrbit(0)
	}

	BEHAVIOUR
	{
		name = OrbitGenerator
		type = OrbitGenerator

		FIXED_ORBIT
		{
			ORBIT = CreateOrbit([@/sma, 1.0E-11, 1.0E-11, 0, 0, 0, 0], 1)
		}
	}

	PARAMETER
	{
		name = Satellite
		type = VesselParameterGroup

		define = the telescope
		dissassociateVesselsOnContractCompletion = true

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}

		PARAMETER
		{
			name = PartValidation
			type = PartValidation

			part = InfraredTelescope
		}

		PARAMETER
		{
			name = Any
			type = Any
			title = Have a power generator onboard

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = !@Constellations:DEBUG
				partModule = ModuleDeployableSolarPanel
				minCount = 1
			}

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more generators
				hideChildren = !@Constellations:DEBUG
				partModule = ModuleGenerator
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more curved solar panels
				hideChildren = !@Constellations:DEBUG
				partModule = ModuleCurvedSolarPanel
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more fission reactors
				hideChildren = !@Constellations:DEBUG
				partModule = FissionReactor
				minCount = 1
			}

			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more radioisotope generators
				hideChildren = !@Constellations:DEBUG
				partModule = ModuleRadioisotopeGenerator
				minCount = 1
			}

			PARAMETER:NEEDS[Kopernicus]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = !@Constellations:DEBUG
				partModule = KopernicusSolarPanel
				minCount = 1
			}
		}

		PARAMETER
		{
			name = ReachSpecificOrbit
			type = ReachSpecificOrbit

			disableOnStateChange = false

			index = 0
			deviationWindow = 0.5
		}

		duration = 2s
	}

	PARAMETER
	{
		name = Satellite
		type = VesselParameterGroup

		vessel = the telescope
		title = Start the telescope and transmit the results

		PARAMETER
		{
			name = CollectScience
			type = CollectScience

			experiment = infraredTelescope
			recoveryMethod = Transmit
		}
	}
}