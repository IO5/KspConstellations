CONTRACT_TYPE
{
	sortKey = d

	name = KSOSatellite
	group = KerbinConstellations

	title = Launch a satellite into @/orbitType orbit
	genericTitle = Launch a satellite into kerbosynchronous orbit

	DATA
	{
		type = string
		desc1 = We found a prospecting client who is willing to pay an exorbitant amount of money for launching their satellite into orbit. An "orbitant" amount would be more suiting for a space program, but we didn't argue.
		desc2 = ComTech needs a new satellite in @/orbitType orbit. They are willing to pay premium and we could use those funds.
		desc3 = The Kerbalkind calls for more TV channels and ComTech will answer! They need our help to launch a new satellite though.
		orbitType = @/orbitTypes.ElementAt(@/isStationary ? 0 : 1)
		hidden = true
	}

	DATA
	{
		type = List<string>
		descs = [@/desc1, @/desc2, @/desc3]
		orbitTypes = ["kerbostationary", "kerbosynchronous"]
		hidden = true
	}

	DATA
	{
		type = bool
		isStationary = @/difficulty < 0.25
	}

	description = @/descs.Random()
	genericDescription = Launch a satellite into kerbosynchronous orbit

	completedMessage = The satellite is in position and working!

	maxSimultaneous = 1

	synopsis = Launch a satellite into @/orbitType orbit above the specified location

	prestige = Trivial

	maxExpiry = 21

	targetBody = HomeWorld()

	notes = Required deltaV from Low @/targetBody Orbit: @/deltaV.Print() m/s

	REQUIREMENT
	{
		name = Rendezvous
		type = Rendezvous
	}

	REQUIREMENT
	{
		name = SynchronoushOrbitPossible
		type = Expression
		title = Kerbostationary orbit around HomeWorld() is possible
		expression = HomeWorld().CanHaveSynchronousOrbit(0)
	}

	DATA
	{
		type = int
		satCounter = $Constellations_Sat_Counter
	}

	BEHAVIOUR
	{
		name = Expression
		type = Expression
		CONTRACT_COMPLETED_SUCCESS
		{
			Constellations_Sat_Counter = @/satCounter + 1
		}
	}

	DATA
	{
		type = double

		difficulty = Random(0, Max(Reputation()/1000, 0))
		inc = @/isStationary ? 0 : (5 + 15 * @/difficulty)
		sma = Pow((@/targetBody.GM() * Pow(@/targetBody.RotationalPeriod(), 2)) / 39.478417604357432, 0.3333333333333333)
		mna = Random(-3.1415926536, 3.1415926536)

		reputation = 10
		minFunds = 75 * HomeWorld().Radius() / 600
		maxFunds = @minFunds * 1.2
		funds = ((@maxFunds - @minFunds) * @difficulty + @minFunds) * (4/(@/satCounter + 8) + 0.5)
		fundsMultiple = Pow(10, Round(Log(@funds, 10) - 1.5)) / 2

		sensitivity = 2 * Pow(@/sma, 1.5) / Pow(Max(1, @/targetBody.GM()), 0.5) // rate of change of sma in relation to orbital velocity
		multiple = Pow(10, Round(Log(@sensitivity, 10) - 0.5))
		coeff = Max(Round(@sensitivity, @multiple), 1000) // sensitivity rounded to a nice round number

		distSensitivity = 18.84955592153876 * Pow(@/sma, 1.5) / Max(Pow(@/targetBody.GM(), 0.5), 1)
		distMultiple = Pow(10, Round(Log(@distSensitivity, 10) - 0.5))
		distCoeff = Round(@distSensitivity, @distMultiple)

		altThreshold1 = Round(@coeff / 2 + @multiple / 2, @multiple)
		altThreshold2 = Round(@coeff / 40 + @multiple / 20, @multiple / 10)
		altThreshold3 = Round(@coeff / 7500 + 0.5) / 2
		distThreshold1 = @distCoeff / 4

		r1 = @/targetBody.Radius() + @/targetBody.AtmosphereAltitude()
		deltaV = Pow(@/targetBody.GM() / @r1, 0.5) * (Pow(2 * @/sma / (@r1 + @/sma), 0.5) - 1) + Pow(@/targetBody.GM() / @/sma, 0.5) * (1 - Pow(2 * @/r1 / (@r1 + @/sma), 0.5))
	}

	DATA
	{
		type = long

		intAlt = Round(@/sma - @/targetBody.Radius())
		kmDistThreshold1 = Round(@/distThreshold1 / 1000)
	}

	rewardScience = 0
	rewardReputation = @/reputation
	rewardFunds = Round(@/funds, @/fundsMultiple)
	advanceFunds = @rewardFunds / 4
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	DATA
	{
		type = double
		rng = Random()
	}

	REQUIREMENT
	{
		name = Rng
		type = Expression
		expression = @/rng > 0.5
		checkOnActiveContract = false
		title = Random chance
	}

	REQUIREMENT
	{
		name = TechResearched
		type = TechResearched

		part = mediumDishAntenna
	}

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract

		contractType = LKOSatellite
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = KSO Sat Marker
			craftPart = constellations-dummy
			owned = False
			targetBody = HomeWorld()
			vesselType = DroppedPart

			ORBIT = CreateOrbit([@/sma, 1.0E-11, @/inc, 0, Random(0, 360), @/mna, 0], 1)
		}
	}

	PARAMETER
	{
		name = Satellite
		type = VesselParameterGroup

		defineList = initialSats
		define = KSO Sat
		dissassociateVesselsOnContractCompletion = true

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}

		PARAMETER
		{
			name = HasAntenna
			type = HasAntenna
			minAntennaPower = 2000000000
			antennaType = EITHER
		}

		PARAMETER
		{
			name = Any
			type = Any
			title = Have solar panels onboard

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = true

				partModule = ModuleDeployableSolarPanel
				minCount = 1
			}
		
			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more curved solar panels
				hideChildren = true
				
				partModule = ModuleCurvedSolarPanel
				minCount = 1
			}
		
			PARAMETER:NEEDS[Kopernicus]
			{
				name = PartValidation
				type = PartValidation
				hideChildren = true
				title = 1 or more solar panels
				partModule = KopernicusSolarPanel
				minCount = 1
			}
		}

		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Probe
			disableOnStateChange = false
		}

		PARAMETER
		{
			name = Orbit
			type = Orbit

			title = Circularize at @/intAlt.Print() m with less than @/altThreshold1.ToString("N0") m deviation

			minPeA = Max(0, @/intAlt - @/altThreshold1)
			maxApA = Max(0, @/intAlt + @/altThreshold1)

			minInclination = Max(@/inc - 0.1, 0)
			maxInclination = Min(@/inc + 0.1, 180)
		}

		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous

			title = Keep the relay within @/kmDistThreshold1.Print() km of the KSO Sat Marker

			disableOnStateChange = false

			vessel = KSO Sat Marker
			distance = @/distThreshold1

			hideChildren = !@Constellations:DEBUG
		}

		PARAMETER
		{
			name = Precision1
			type = VesselParameterGroup

			vessel = KSO Sat
			title = Circularize at @/intAlt.Print() m with less than @/altThreshold2.ToString("N0") m deviation (Optional)

			optional = True
			rewardReputation = @Constellations:precisionReputation
			rewardFunds = @Constellations:precisionFunds

			hideChildren = !@Constellations:DEBUG

			PARAMETER
			{
				name = Orbit
				type = Orbit

				minPeA = Max(0, @/intAlt - @/altThreshold2)
				maxApA = Max(0, @/intAlt + @/altThreshold2)

				minInclination = Max(@/inc - 0.1, 0)
				maxInclination = Min(@/inc + 0.1, 180)

				hideChildren = !@Constellations:DEBUG
			}
		}

		PARAMETER
		{
			name = Precision2
			type = VesselParameterGroup

			vessel = KSO Sat
			title = Circularize at @/intAlt.Print() m with less than @/altThreshold3.ToString("N0") m deviation (Optional)

			optional = True
			rewardReputation = 2 * @Constellations:precisionReputation
			rewardFunds = 2 * @Constellations:precisionFunds

			hideChildren = !@Constellations:DEBUG

			PARAMETER
			{
				name = Orbit
				type = Orbit

				minPeA = Max(0, @/intAlt - @/altThreshold3)
				maxApA = Max(0, @/intAlt + @/altThreshold3)

				minInclination = Max(@/inc - 0.1, 0)
				maxInclination = Min(@/inc + 0.1, 180)

				hideChildren = !@Constellations:DEBUG
			}
		}

		duration = 1d
	}

	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = CONTRACT_COMPLETED
		vessel = KSO Sat Marker
	}
}
