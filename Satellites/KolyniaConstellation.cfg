CONTRACT_TYPE
{
	sortKey = g

	DATA_EXPAND
	{
		type = int
		side = [0, 1]
	}

	name = KolyniaConstellation
	group = KerbinConstellations

	title = "Launch a satellite into "+@/targetBody+"'s kolynia orbit"
	genericTitle = "Launch a satellite into "+@/targetBody+"'s @/direction kolynia orbit"

	description = Kerbals @/direction2 are complaining about having bad signal from kerbostationary satellites. A couple of satellites in a high-inclination high-eccentricity orbit should help with coverage n those latitudes.
	genericDescription = "Launch a satellite into "+@/targetBody+"'s kolynia orbit"

	completedMessage = The satellite is in position and working!

	maxSimultaneous = 1

	synopsis = "Launch a satellite into "+@/targetBody+"'s kolynia orbit"

	prestige = Trivial

	maxExpiry = 21

	targetBody = HomeWorld()

	notes = Required deltaV from Low @/targetBody Orbit: @/deltaV.Print() m/s \nDon't forget to leave some fuel for station-keeping!

	DATA
	{
		type = double

		inc = 63.4
		sma = Pow((@/targetBody.GM() * Pow(@/targetBody.RotationalPeriod() / 2, 2)) / 39.478417604357432, 0.3333333333333333)
		ecc = (@sma - @/targetBody.Radius() - @/targetBody.AtmosphereAltitude() * 1.14285714286) / @sma
	}

	rewardScience = 0
	rewardReputation = 12
	rewardFunds = 80 * HomeWorld().Radius() / 600
	advanceFunds = @rewardFunds / 4
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	DATA
	{
		type = int
		idx = [0, 1, 2, 3, 4, 5].SelectUnique()
		uniquenessCheck = CONTRACT_ALL
		hidden = true
	}

	DATA
	{
		type = int
		plane = @/idx / 2
		pair = Mod(@/idx, 2)
		number = @/idx + 1
	}

	DATA
	{
		type = List<string>
		directions = ["south", "north"]
		directions2 = ["down south", "up north"]
		letters = ["S", "N"]
	}

	DATA
	{
		type = string
		direction = @/directions.ElementAt(@/side)
		direction2 = @/directions2.ElementAt(@/side)
		letter = @/letters.ElementAt(@/side)+""+@/number
		sat = Kolynia Sat @/letter
		hidden = true
	}

	DATA
	{
		type = double
		rng = Random()
	}

	REQUIREMENT
	{
		name = Rng
		type = Expression
		expression = @/rng > 0.5
		checkOnActiveContract = false
		title = Random chance
	}

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract

		contractType = KSOSatellite
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = Kolynia Satellite Marker
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody
			vesselType = DroppedPart

			ORBIT
			{
				SMA = @/sma
				ECC = @/ecc
				INC = @/inc
				LPE = @/side * 180 + 90
				LAN = @/plane * 120 + 60 * (1 - @/side)
				MNA = @/pair * 3.1415926536 + 1.0471975512 * @/plane
				EPH = 0
				REF = 0 // ignored
			}
		}
	}

	DATA
	{
		type = double

		sensitivity = 2 * Pow(@/sma, 1.5) / Pow(Max(1, @/targetBody.GM()), 0.5) // rate of change of sma in relation to orbital velocity
		multiple = Pow(10, Round(Log(@sensitivity, 10) - 0.5))
		coeff = Max(Round(@sensitivity, @multiple), 1000) // sensitivity rounded to a nice round number

		distSensitivity = 18.84955592153876 * Pow(@/sma, 1.5) / Max(Pow(@/targetBody.GM(), 0.5), 1)
		distMultiple = Pow(10, Round(Log(@distSensitivity, 10) - 0.5))
		distCoeff = Round(@distSensitivity, @distMultiple)

		altThreshold1 = Round(@coeff / 2 + @multiple / 2, @multiple)
		altThreshold2 = Round(@coeff / 20 + @multiple / 20, @multiple / 10)
		altThreshold3 = Round(@coeff / 200 + 0.5) / 2
		distThreshold1 = @distCoeff / 2

		PeR = @/sma * (1 - @/ecc)
		ApR = @/sma * (1 + @/ecc)
		r1 = @/targetBody.Radius() + @/targetBody.AtmosphereAltitude()
		v0 = Pow(@/targetBody.GM() / @r1, 0.5)
		v1 = Pow(@/targetBody.GM() * (2/@r1 - 2/(@r1 + @ApR)), 0.5)
		v2 = Pow(@/targetBody.GM() * (2/@ApR - 2/(@r1 + @ApR)), 0.5)
		v3 = Pow(@/targetBody.GM() * (2/@ApR - 1/(@/sma)), 0.5)
		deltaV = (@v1 - @v0) + (@v3 - @v2)
	}

	DATA
	{
		type = long

		intPe = Max(0, Round(@/PeR - @/targetBody.Radius()))
		intAp = Max(0, Round(@/ApR - @/targetBody.Radius()))
		kmDistThreshold1 = Round(@/distThreshold1 / 1000)
	}

	PARAMETER
	{
		name = Satellite
		type = VesselParameterGroup

		define = @/sat

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}

		PARAMETER
		{
			name = Antenna
			type = Any

			hideChildren = !@Constellations:DEBUG
			title = Antenna (relay or transmit) rating (combined): At least 3G

			PARAMETER
			{
				name = HasAntenna
				type = HasAntenna
				minAntennaPower = 3000000000 // 3G
				antennaType = TRANSMIT
			}

			PARAMETER
			{
				name = HasAntenna
				type = HasAntenna
				minAntennaPower = 3000000000 // 3G
				antennaType = RELAY
			}
		}

		PARAMETER
		{
			name = PowerGenerator
			type = Any
			title = Have solar panels onboard
			hideChildren = !@Constellations:DEBUG

			PARAMETER
			{
				name = StockSolarGenerator
				type = PartValidation
				partModule = ModuleDeployableSolarPanel
				minCount = 1
			}
		
			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = NFSolarGenerator
				type = PartValidation
				partModule = ModuleCurvedSolarPanel
				minCount = 1
			}
		
			PARAMETER:NEEDS[Kopernicus]
			{
				name = KopernicusSolarGenerator
				type = PartValidation
				partModule = KopernicusSolarPanel
				minCount = 1
			}
		}

		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = Probe
			disableOnStateChange = false
		}

		PARAMETER
		{
			name = Orbit
			type = Orbit

			title = Match the orbit with less than @/altThreshold1.ToString("N0") m deviation

			minPeA = Max(0, @/intPe - @/altThreshold1)
			maxPeA = @/intPe + @/altThreshold1
			minApA = Max(0, @/intAp - @/altThreshold1)
			maxApA = @/intAp + @/altThreshold1

			minInclination = Max(0, @/inc - 0.05)
			maxInclination = Min(180, @/inc + 0.049)
		}

		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous

			title = Keep the satellite within @/kmDistThreshold1.Print() km of the Kolynia Satellite Marker

			disableOnStateChange = false

			vessel = Kolynia Satellite Marker
			distance = @/distThreshold1

			hideChildren = !@Constellations:DEBUG
		}

		PARAMETER
		{
			name = Precision1
			type = VesselParameterGroup

			vessel = @/sat
			title = Match the orbit with less than @/altThreshold2.ToString("N0") m deviation (Optional)
			notes = Target periapsis: @/intPe.Print() m\nTarget apoapsis: @/intAp.Print() m

			optional = True
			rewardReputation = @Constellations:precisionReputation
			rewardFunds = @Constellations:precisionFunds

			hideChildren = !@Constellations:DEBUG

			PARAMETER
			{
				name = Orbit
				type = Orbit

				minPeA = Max(0, @/intPe - @/altThreshold2)
				maxPeA = @/intPe + @/altThreshold2
				minApA = Max(0, @/intAp - @/altThreshold2)
				maxApA = @/intAp + @/altThreshold2

				minInclination = Max(0, @/inc - 0.05)
				maxInclination = Min(180, @/inc + 0.049)

				hideChildren = !@Constellations:DEBUG
			}
		}

		PARAMETER
		{
			name = Precision2
			type = VesselParameterGroup

			vessel = @/sat
			title = Match the orbit with less than @/altThreshold3.ToString("N0") m deviation (Optional)
			notes = Target periapsis: @/intPe.Print() m\nTarget apoapsis: @/intAp.Print() m

			optional = True
			rewardReputation = 2 * @Constellations:precisionReputation
			rewardFunds = 2 * @Constellations:precisionFunds

			hideChildren = !@Constellations:DEBUG

			PARAMETER
			{
				name = Orbit
				type = Orbit

				minPeA = Max(0, @/intPe - @/altThreshold3)
				maxPeA = @/intPe + @/altThreshold3
				minApA = Max(0, @/intAp - @/altThreshold3)
				maxApA = @/intAp + @/altThreshold3

				minInclination = Max(0, @/inc - 0.05)
				maxInclination = Min(180, @/inc + 0.049)

				hideChildren = !@Constellations:DEBUG
			}
		}

		duration = 1d
	}

	BEHAVIOUR
	{
		name = DestroyVessel
		type = DestroyVessel
		onState = CONTRACT_COMPLETED
		vessel = Kolynia Satellite Marker
	}
}
