CONTRACT_TYPE
{
	sortKey = h

	name = AddSatellites
	group = KerbinConstellations

	title = Add two more satellites in the same orbit as @/ogSat
	genericTitle = Add two more satellites in the same orbit as target vessel

	description = The launch of @/ogSat was such a success that our client wants more of it. In the same orbit. Preferably spaced apart.
	genericDescription = Form an equilateral triangle of satellites

	completedMessage = The satellites are in position and working!

	maxSimultaneous = 1

	synopsis = Form an equilateral triangle of satellites

	prestige = Trivial

	maxExpiry = 21

	targetBody = HomeWorld()

	notes = Required deltaV from Low @/targetBody Orbit: @/deltaV.Print() m/s

	DATA
	{
		type = int
		satCounter = $Constellations_Sat_Counter
	}

	BEHAVIOUR
	{
		name = Expression
		type = Expression
		CONTRACT_COMPLETED_SUCCESS
		{
			Constellations_Sat_Counter = @/satCounter + 1
		}
	}

	DATA
	{
		type = double

		inc = Max(0, @/ogSat.Orbit().Inclination())
		maxSma = Pow((@/targetBody.GM() * Pow(@/targetBody.RotationalPeriod(), 2)) / 39.478417604357432, 0.3333333333333333)
		sma = Max(1, @/ogSat.Orbit().SemiMajorAxis())

		difficulty = 0.75 * (@sma - @r1)/(@maxSma - @r1) + 0.25 * @inc / 90

		reputation = 8 * @difficulty + 10
		minFunds = 40 * HomeWorld().Radius() / 600
		maxFunds = 80 * HomeWorld().Radius() / 600
		funds = ((@maxFunds - @minFunds) * @difficulty + @minFunds) * (4/(@/satCounter + 8) + 0.5)
		fundsMultiple = Pow(10, Round(Log(@funds, 10) - 1.5)) / 2

		r1 = @/targetBody.Radius() + @/targetBody.AtmosphereAltitude()
		deltaV = Pow(@/targetBody.GM() / @r1, 0.5) * (Pow(2 * @/sma / (@r1 + @/sma), 0.5) - 1) + Pow(@/targetBody.GM() / @/sma, 0.5) * (1 - Pow(2 * @/r1 / (@r1 + @/sma), 0.5))
	}

	rewardScience = 0
	rewardReputation = @/reputation
	rewardFunds = Round(@/funds, @/fundsMultiple)
	advanceFunds = @rewardFunds / 4
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	DATA
	{
		type = List<VesselIdentifier>
		initialSats = $initialSats
		requiredValue = false
	}

	DATA
	{
		type = Vessel
		ogSat = @/initialSats.Where(v => (Vessel(v).CelestialBody() == @/targetBody && Vessel(v).IsOrbiting()) ).SelectUnique()

		requiredValue = true
		uniquenessCheck = CONTRACT_ALL

		title = The target vessel is a satellite launched through contract
	}

	REQUIREMENT
	{
		name = ValidOrbit
		type = Expression

		expression = @/ogSat.Orbit().Eccentricity() < 0.05 && @/ogSat.Orbit().Apoapsis() < (@/maxSma - @/r1) && @/ogSat.Orbit().Periapsis() > @/targetBody.AtmosphereAltitude()
		title = The target vessel is still in a valid orbit
	}

	DATA
	{
		type = List<string>
		satellites = [ "Sat A", "Sat B" ]
		names = ["The first satellite", "The second satellite"]
		markers = [ "Satellite Marker A", "Satellite Marker B" ]
	}

	// finish non-generic first
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract

		contractType = KPSBlock.2
	}
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract

		contractType = KolyniaConstellation.0
		minCount = 6
	}
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract

		contractType = KolyniaConstellation.1
		minCount = 6
	}

	REQUIREMENT
	{
		name = Cooldown
		type = CompleteContract

		contractType = AddSatellites
		cooldownDuration = @Constellations:constellationCD
		minCount = 0
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = @/markers.ElementAt(0)
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody
			vesselType = DroppedPart

			ORBIT
			{
				SMA = @/ogSat.Orbit().SemiMajorAxis()
				ECC = @/ogSat.Orbit().Eccentricity()
				INC = @/ogSat.Orbit().Inclination()
				LPE = @/ogSat.Orbit().ArgumentOfPeriapsis()
				LAN = @/ogSat.Orbit().LAN()
				MNA = @/ogSat.Orbit().MeanAnomalyAtEpoch() - 2.0943951
				EPH = @/ogSat.Orbit().Epoch()
				REF = 0 // ignored
			}
		}

		VESSEL
		{
			name = @/markers.ElementAt(1)
			craftPart = constellations-dummy
			owned = False
			targetBody = @/targetBody
			vesselType = DroppedPart

			ORBIT
			{
				SMA = @/ogSat.Orbit().SemiMajorAxis()
				ECC = @/ogSat.Orbit().Eccentricity()
				INC = @/ogSat.Orbit().Inclination()
				LPE = @/ogSat.Orbit().ArgumentOfPeriapsis()
				LAN = @/ogSat.Orbit().LAN()
				MNA = @/ogSat.Orbit().MeanAnomalyAtEpoch() + 2.0943951
				EPH = @/ogSat.Orbit().Epoch()
				REF = 0 // ignored
			}
		}
	}

	DATA
	{
		type = double

		sensitivity = 2 * Pow(@/sma, 1.5) / Pow(Max(1, @/targetBody.GM()), 0.5) // rate of change of sma in relation to orbital velocity
		multiple = Pow(10, Round(Log(@sensitivity, 10) - 0.5))
		coeff = Max(Round(@sensitivity, @multiple), 1000) // sensitivity rounded to a nice round number

		distSensitivity = 18.84955592153876 * Pow(@/sma, 1.5) / Max(Pow(@/targetBody.GM(), 0.5), 1)
		distMultiple = Pow(10, Round(Log(@distSensitivity, 10) - 0.5))
		distCoeff = Round(@distSensitivity, @distMultiple)

		altThreshold1 = Round(@coeff / 2 + @multiple / 2, @multiple)
		altThreshold2 = Round(@coeff / 40 + @multiple / 20, @multiple / 10)
		altThreshold3 = Round(@coeff / 7500 + 0.5) / 2
		distThreshold1 = @distCoeff / 4
		
		requiredAntennaPower = Max(@/ogSat.AntennaTransmitPower(), @/ogSat.AntennaRelayPower())
	}

	DATA
	{
		type = long

		intAp = @/ogSat.Orbit().Apoapsis()
		intPe = @/ogSat.Orbit().Periapsis()
		kmDistThreshold1 = Round(@/distThreshold1 / 1000)
	}

	PARAMETER
	{
		ITERATOR
		{
			type = int
			idx = [0, 1]
		}
		name = "satellite"+@idx
		type = VesselParameterGroup

		title = @/names.ElementAt(@idx)
		define = @/satellites.ElementAt(@idx)
		dissassociateVesselsOnContractCompletion = true

		rewardFunds = @/advanceFunds

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}

		PARAMETER
		{
			name = Antenna
			type = Any

			hideChildren = !@Constellations:DEBUG
			title = Antenna (relay or transmit) rating (combined): At least @/requiredAntennaPower

			PARAMETER
			{
				name = HasAntenna
				type = HasAntenna
				minAntennaPower = @/requiredAntennaPower
				antennaType = TRANSMIT
			}

			PARAMETER
			{
				name = HasAntenna
				type = HasAntenna
				minAntennaPower = @/requiredAntennaPower
				antennaType = RELAY
			}
		}

		PARAMETER
		{
			name = Any
			type = Any
			title = Have solar panels onboard

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = true

				partModule = ModuleDeployableSolarPanel
				minCount = 1
			}
		
			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more curved solar panels
				hideChildren = true
				
				partModule = ModuleCurvedSolarPanel
				minCount = 1
			}
		
			PARAMETER:NEEDS[Kopernicus]
			{
				name = PartValidation
				type = PartValidation
				hideChildren = true
				title = 1 or more solar panels
				partModule = KopernicusSolarPanel
				minCount = 1
			}
		}

		PARAMETER
		{
			name = Orbit
			type = Orbit

			title = Match the orbit with less than @/altThreshold1.ToString("N0") m deviation

			minPeA = Max(0, @/intPe - @/altThreshold1)
			maxPeA = @/intPe + @/altThreshold1
			minApA = Max(0, @/intAp - @/altThreshold1)
			maxApA = @/intAp + @/altThreshold1

			minInclination = Max(0, Round(@/ogSat.Orbit().Inclination(), 0.1) - 0.05)
			maxInclination = Min(180, Round(@/ogSat.Orbit().Inclination(), 0.1) + 0.049)
		}

		PARAMETER
		{
			name = Rendezvous
			type = Rendezvous

			title = Keep the satellite within @/kmDistThreshold1.Print() km of the @/markers.ElementAt(@../idx)

			disableOnStateChange = false

			vessel = @/markers.ElementAt(@../idx)
			distance = @/distThreshold1

			hideChildren = !@Constellations:DEBUG
		}

		PARAMETER
		{
			name = Precision1
			type = VesselParameterGroup

			vessel = @/satellites.ElementAt(@../idx)
			title = "Match "+@/ogSat+"'s orbit with less than "+@/altThreshold2.ToString("N0")+" m deviation (Optional)"
			notes = Target periapsis: @/intPe.Print() m\nTarget apoapsis: @/intAp.Print() m

			optional = True
			rewardReputation = @Constellations:precisionReputation
			rewardFunds = @Constellations:precisionFunds

			hideChildren = !@Constellations:DEBUG

			PARAMETER
			{
				name = Orbit
				type = Orbit

				minPeA = Max(0, @/intPe - @/altThreshold2)
				maxPeA = @/intPe + @/altThreshold2
				minApA = Max(0, @/intAp - @/altThreshold2)
				maxApA = @/intAp + @/altThreshold2

				minInclination = Max(0, Round(@/ogSat.Orbit().Inclination(), 0.1) - 0.05)
				maxInclination = Min(180, Round(@/ogSat.Orbit().Inclination(), 0.1) + 0.049)

				hideChildren = !@Constellations:DEBUG
			}
		}

		PARAMETER
		{
			name = Precision2
			type = VesselParameterGroup

			vessel = @/satellites.ElementAt(@../idx)
			title = "Match "+@/ogSat+"'s orbit with less than "+@/altThreshold3.ToString("N0")+" m deviation (Optional)"
			notes = Target periapsis: @/intPe.Print() m\nTarget apoapsis: @/intAp.Print() m

			optional = True
			rewardReputation = @Constellations:precisionReputation
			rewardFunds = @Constellations:precisionFunds

			hideChildren = !@Constellations:DEBUG

			PARAMETER
			{
				name = Orbit
				type = Orbit

				minPeA = Max(0, @/intPe - @/altThreshold3)
				maxPeA = @/intPe + @/altThreshold3
				minApA = Max(0, @/intAp - @/altThreshold3)
				maxApA = @/intAp + @/altThreshold3

				minInclination = Max(0, Round(@/ogSat.Orbit().Inclination(), 0.1) - 0.05)
				maxInclination = Min(180, Round(@/ogSat.Orbit().Inclination(), 0.1) + 0.049)

				hideChildren = !@Constellations:DEBUG
			}
		}

		duration = 1d
	}
	
	BEHAVIOUR
	{
		name = DestroyVesselB
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = satellite0
		vessel = @/markers.ElementAt(0)
	}

	BEHAVIOUR
	{
		name = DestroyVesselC
		type = DestroyVessel
		onState = PARAMETER_COMPLETED
		parameter = satellite1
		vessel = @/markers.ElementAt(1)
	}
}