CONTRACT_TYPE
{
	sortKey = f

	name = HKOSatellite
	group = KerbinConstellations

	title = Launch a satellite into high @/targetBody orbit

	description = All that traffic in lower orbits of @/targetBody is interfering with science instruments. Researchers want you to place their scientific satellite into high @/targetBody orbit.

	completedMessage = The satellite is in position and working!

	maxSimultaneous = 1

	synopsis = Launch a satellite with a scientific instrument into high @/targetBody orbit

	prestige = Significant
	agent = Kerbal Society for Science

	maxExpiry = 21

	targetBody = HomeWorld()

	notes = Required deltaV from Low @/targetBody Orbit: @/deltaV.Print() m/s

	DATA
	{
		type = int
		satCounter = $Constellations_Sat_Counter
	}

	BEHAVIOUR
	{
		name = Expression
		type = Expression
		CONTRACT_COMPLETED_SUCCESS
		{
			Constellations_Sat_Counter = @/satCounter + 1
		}
	}

	DATA
	{
		type = double

		difficulty = Pow(Random(0, Max(Reputation()/1000, 0)), 2)
		inc = 10 * @difficulty
		minSma = 1.1 * Pow((@/targetBody.GM() * Pow(@/targetBody.RotationalPeriod(), 2)) / 39.478417604357432, 0.3333333333333333)
		maxSma = 3 * @minSma
		sma = (@maxSma - @minSma) * @difficulty + @minSma

		minFunds = 60 * HomeWorld().Radius() / 600
		maxFunds = @minFunds * 1.5
		funds = ((@maxFunds - @minFunds) * @difficulty + @minFunds) * (4/(@/satCounter + 8) + 0.5)
		fundsMultiple = Pow(10, Round(Log(@funds, 10) - 1.5)) / 2

		r1 = @/targetBody.Radius() + @/targetBody.AtmosphereAltitude()
		deltaV = Pow(@/targetBody.GM() / @r1, 0.5) * (Pow(2 * @/sma / (@r1 + @/sma), 0.5) - 1) + Pow(@/targetBody.GM() / @/sma, 0.5) * (1 - Pow(2 * @/r1 / (@r1 + @/sma), 0.5))
	}

	rewardScience = 15
	rewardReputation = 15
	rewardFunds = Round(@/funds, @/fundsMultiple)
	advanceFunds = @rewardFunds / 4
	failureReputation = @rewardReputation
	failureFunds = @advanceFunds

	DATA
	{
		type = double
		rng = Random()
	}

	REQUIREMENT
	{
		name = Rng
		type = Expression
		expression = @/rng > 0.9
		checkOnActiveContract = false
		title = Random chance
	}

	REQUIREMENT
	{
		name = SynchronoushOrbitPossible
		type = Expression
		title = Kerbostationary orbit around HomeWorld() is possible
		expression = HomeWorld().CanHaveSynchronousOrbit(0)
	}

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract

		contractType = MKOSatellite
	}

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract

		contractType = HKOSatellite
		cooldownDuration = 7d
	}

	BEHAVIOUR
	{
		name = OrbitGenerator
		type = OrbitGenerator

		FIXED_ORBIT
		{
			ORBIT = CreateOrbit([@/sma, 1.0E-11, @/inc, 0, Random(0, 360), 0, 0], 1)
		}
	}

	DATA
	{
		type = AvailablePart
		part = [ AvailablePart(sensorGravimeter), AvailablePart(GooExperiment), AvailablePart(Magnetometer), AvailablePart(sensorGravimeter), AvailablePart(science_module), AvailablePart(sensorThermometer) ].Where(p => p.IsUnlocked()).Random()
		requiredValue = True
		title = Must have some experiment parts unlocked
	}

	PARAMETER
	{
		name = Satellite
		type = VesselParameterGroup

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 0
			maxCrew = 0
		}

		PARAMETER
		{
			name = PartValidation
			type = PartValidation

			part = @/part
		}

		PARAMETER
		{
			name = Any
			type = Any
			title = Have solar panels onboard

			PARAMETER
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more solar panels
				hideChildren = true

				partModule = ModuleDeployableSolarPanel
				minCount = 1
			}
		
			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = PartValidation
				type = PartValidation
				title = 1 or more curved solar panels
				hideChildren = true
				
				partModule = ModuleCurvedSolarPanel
				minCount = 1
			}
		
			PARAMETER:NEEDS[Kopernicus]
			{
				name = PartValidation
				type = PartValidation
				hideChildren = true
				title = 1 or more solar panels
				partModule = KopernicusSolarPanel
				minCount = 1
			}
		}

		PARAMETER
		{
			name = ReachSpecificOrbit
			type = ReachSpecificOrbit

			disableOnStateChange = false

			index = 0
			deviationWindow = (1 - @/difficulty) * 9.5 + 0.5
		}

		duration = 2s
	}
}